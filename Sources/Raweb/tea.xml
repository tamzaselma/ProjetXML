<?xml version="1.0" encoding="utf-8"?>
<raweb xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="en" year="2016">
  <identification id="tea" isproject="true">
    <shortname>TEA</shortname>
    <projectName>Time, Events and Architectures</projectName>
    <theme-de-recherche>Embedded and Real-time Systems</theme-de-recherche>
    <domaine-de-recherche>Algorithmics, Programming, Software and Architecture</domaine-de-recherche>
    <urlTeam>https://team.inria.fr/TEA</urlTeam>
    <header_dates_team>Creation of the Team: 2014 January 01, updated into Project-Team: 2015 January 01</header_dates_team>
    <LeTypeProjet>Project-Team</LeTypeProjet>
    <keywordsSdN>
      <term>1.2. - Networks</term>
      <term>1.2.7. - Cyber-physical systems</term>
      <term>1.2.8. - Network security</term>
      <term>1.5. - Complex systems</term>
      <term>1.5.1. - Systems of systems</term>
      <term>1.5.2. - Communicating systems</term>
      <term>2.1. - Programming Languages</term>
      <term>2.1.1. - Semantics of programming languages</term>
      <term>2.1.6. - Concurrent programming</term>
      <term>2.1.8. - Synchronous languages</term>
      <term>2.1.10. - Domain-specific languages</term>
      <term>2.2. - Compilation</term>
      <term>2.2.1. - Static analysis</term>
      <term>2.2.3. - Run-time systems</term>
      <term>2.3. - Embedded and cyber-physical systems</term>
      <term>2.3.1. - Embedded systems</term>
      <term>2.3.2. - Cyber-physical systems</term>
      <term>2.3.3. - Real-time systems</term>
      <term>2.4. - Verification, reliability, certification</term>
      <term>2.4.1. - Analysis</term>
      <term>2.4.2. - Model-checking</term>
      <term>2.4.3. - Proofs</term>
      <term>2.5. - Software engineering</term>
      <term>4.4. - Security of equipment and software</term>
      <term>4.5. - Formal methods for security</term>
      <term>4.7. - Access control</term>
      <term>5.7.2. - Music</term>
      <term>6.1.1. - Continuous Modeling (PDE, ODE)</term>
      <term>6.1.3. - Discrete Modeling (multi-agent, people centered)</term>
      <term>6.2.1. - Numerical analysis of PDE and ODE</term>
      <term>6.2.5. - Numerical Linear Algebra</term>
      <term>6.2.6. - Optimization</term>
      <term>7.4. - Logic in Computer Science</term>
      <term>7.6. - Computer Algebra</term>
    </keywordsSdN>
    <keywordsSecteurs>
      <term>5.1. - Factory of the future</term>
      <term>5.2. - Design and manufacturing</term>
      <term>6.1.1. - Software engineering</term>
      <term>6.4. - Internet of things</term>
      <term>6.6. - Embedded systems</term>
      <term>9.2.1. - Music, sound</term>
      <term>9.4.1. - Computer science</term>
    </keywordsSecteurs>
    <UR name="Rennes"/>
  </identification>
  <team id="uid1">
    <person key="tea-2014-idm28088">
      <firstname>Jean-Pierre</firstname>
      <lastname>Talpin</lastname>
      <categoryPro>Chercheur</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Inria, Team leader, Senior Researcher</moreinfo>
      <hdr>oui</hdr>
    </person>
    <person key="moais-2014-idm5672">
      <firstname>Thierry</firstname>
      <lastname>Gautier</lastname>
      <categoryPro>Chercheur</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Inria, Senior Researcher</moreinfo>
    </person>
    <person key="tempo-2014-idm29712">
      <firstname>Vania</firstname>
      <lastname>Joloboff</lastname>
      <categoryPro>Chercheur</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Inria, Senior Researcher</moreinfo>
    </person>
    <person key="tea-2014-idp66648">
      <firstname>Loïc</firstname>
      <lastname>Besnard</lastname>
      <categoryPro>Technique</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>CNRS SED, Senior Research Engineer, seconded at 60%</moreinfo>
    </person>
    <person key="tea-2015-idp65384">
      <firstname>Clément</firstname>
      <lastname>Guy</lastname>
      <categoryPro>Technique</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Inria, until Aug 2016</moreinfo>
    </person>
    <person key="tea-2015-idp66624">
      <firstname>Alexandre</firstname>
      <lastname>Honorat</lastname>
      <categoryPro>Technique</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Inria</moreinfo>
    </person>
    <person key="tea-2016-idp120576">
      <firstname>Hai Nam</firstname>
      <lastname>Tran</lastname>
      <categoryPro>Technique</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Inria, from Dec 2016</moreinfo>
    </person>
    <person key="tea-2015-idp69088">
      <firstname>Simon</firstname>
      <lastname>Lunel</lastname>
      <categoryPro>PhD</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Mitsubishi Electrics R&amp;D, granted by CIFRE</moreinfo>
    </person>
    <person key="tea-2016-idp125632">
      <firstname>Rajesh</firstname>
      <lastname>Gupta</lastname>
      <categoryPro>Visiteur</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>UC San Diego, Jul 2016</moreinfo>
    </person>
    <person key="tea-2016-idp128128">
      <firstname>Brian</firstname>
      <lastname>Larson</lastname>
      <categoryPro>Visiteur</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>FDA/KSU, Jul 2016</moreinfo>
    </person>
    <person key="panama-2014-idp82704">
      <firstname>Stéphanie</firstname>
      <lastname>Lemaile</lastname>
      <categoryPro>Assistant</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Inria</moreinfo>
    </person>
    <person key="panama-2016-idp125648">
      <firstname>Armelle</firstname>
      <lastname>Mozziconacci</lastname>
      <categoryPro>Assistant</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>CNRS, from May 2016</moreinfo>
    </person>
    <person key="tea-2016-idp135568">
      <firstname>Daian</firstname>
      <lastname>Yue</lastname>
      <categoryPro>AutreCategorie</categoryPro>
      <research-centre>Rennes</research-centre>
      <moreinfo>Inria, Master Intern, from Feb 2016 until Jun 2016</moreinfo>
    </person>
  </team>
  <presentation id="uid2">
    <bodyTitle>Overall Objectives</bodyTitle>
    <subsection id="uid3" level="1">
      <bodyTitle>Introduction</bodyTitle>
      <p>An embedded architecture is an artifact of heterogeneous constituents and at the crossing of several design viewpoints: software, embedded in hardware, interfaced with the physical world. Time takes different forms when observed from each of these viewpoints: continuous or discrete, event-based or time-triggered. Unfortunately, modeling and programming formalisms that represent software, hardware and physics significantly alter this perception of time. Moreover, time reasoning in system design is usually isolated to a specific design problem: simulation, profiling, performance, scheduling, parallelization, simulation. The aim of project-team TEA is to define conceptually unified frameworks for reasoning on composition and integration in cyber-physical system design, and to put this reasoning to practice by revisiting analysis and synthesis issues in real-time system design with soundness and compositionality gained from formalization.</p>
    </subsection>
    <subsection id="uid4" level="1">
      <bodyTitle>Context</bodyTitle>
      <p>In the construction of complex systems, information technology (IT) has become a central force of revolutionary changes, driven by the exponential increase of computational power. In the field of telecommunication, IT provides the necessary basis for systems of networked distributed applications. In the field of control engineering, IT provides the necessary basis for embedded control applications. The combination of telecommunication and embedded systems into networked embedded systems opens up a new range of systems, capable of providing more intelligent functionality thank to information and communication (ICT). Networked embedded systems have revolutionized several application domains: energy networks, industrial automation and transport systems.</p>
      <p>20th-century science and technology brought us effective methods and tools for designing both computational and physical systems. But the design of cyber-physical systems (CPS) is much more than the union of those two fields. Traditionally, information scientists only have a hazy notion of requirements imposed by the physical environment of computers. Similarly, mechanical, civil, and chemical engineers view computers strictly as devices executing algorithms. To the extent we have designed CPS, we have done so in an ad hoc, on-off manner that is not repeatable. A new science of CPS design will allow us to create new machines with complex dynamics and high reliability, to apply its principles to new industries and applications in a reliable and economically efficient way. Progress requires nothing less than the construction of a new science and technology foundation for CPS that is simultaneously physical and computational.</p>
    </subsection>
    <subsection id="uid5" level="1">
      <bodyTitle>Motivations</bodyTitle>
      <p>Beyond the buzzword, a CPS is an ubiquitous object of our everyday life. CPSs have evolved from individual independent units (e.g an ABS brake) to more and more integrated networks of units, which may be aggregated into larger components or sub-systems. For example, a transportation monitoring network aggregates monitored stations and trains through a large scale distributed system with relatively high latency. Each individual train is being controlled by a train control network, each car in the train has its own real-time bus to control embedded devices. More and more, CPSs are mixing real-time low latency technology with higher latency distributed computing technology.</p>
      <p>In the past 15 years, CPS development has moved towards Model Driven Engineering (MDE). With MDE methodology, first all requirements are gathered together with use cases, then a model of the system is built (sometimes several models) that satisfy the requirements. There are several modeling formalisms that have appeared in the past ten years with more or less success. The most successful are the <i>executable</i> models <footnote id="uid6" id-text="1"><i>Matlab/Simulink</i>, <ref xlink:href="https://fr.mathworks.com/products/simulink.html" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>fr.<allowbreak/>mathworks.<allowbreak/>com/<allowbreak/>products/<allowbreak/>simulink.<allowbreak/>html</ref></footnote>
<footnote id="uid7" id-text="2"><i>Ptolemy</i>, <ref xlink:href="http://ptolemy.eecs.berkeley.edu" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>ptolemy.<allowbreak/>eecs.<allowbreak/>berkeley.<allowbreak/>edu</ref></footnote>
<footnote id="uid8" id-text="3"><i>SysML</i>, <ref xlink:href="http://www.uml-sysml.org" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>www.<allowbreak/>uml-sysml.<allowbreak/>org</ref></footnote>,
i.e., models that can be simulated, exercised, tested and validated. This approach can be used for both software and hardware.</p>
      <p>A common feature found in CPSs is the ever presence of concurrency and parallelism in models. Large systems are increasingly mixing both types of concurrency. They are structured hierarchically and comprise multiple synchronous devices connected by buses or networks that communicate asynchronously. This led to the advent of so-called GALS (Globally Asynchronous, Locally Synchronous) models, or PALS (Physically Asynchronous, Logically Synchronous) systems, where reactive synchronous objects are communicating asynchronously. Still, these infrastructures, together with their programming models, share some fundamental concerns: parallelism and concurrency synchronization, determinism and functional correctness, scheduling optimality and calculation time predictability.</p>
      <p>Additionally, CPSs monitor and control real-world processes, the dynamics of which are usually governed by physical laws. These laws are expressed by physicists as mathematical equations and formulas. Discrete CPS models cannot ignore these dynamics, but whereas the equations express the continuous behavior usually using real numbers (irrational) variables, the models usually have to work with discrete time and approximate floating point variables.</p>
    </subsection>
    <subsection id="uid9" level="1">
      <bodyTitle>Challenges</bodyTitle>
      <p>A cyber-physical, or reactive, or embedded system is the integration of heterogeneous components originating from several design viewpoints: reactive software, some of which is embedded in hardware, interfaced with the physical environment through mechanical parts. Time takes different forms when observed from each of these viewpoints: it is discrete and event-based in software, discrete and time-triggered in hardware, continuous in mechanics or physics. Design of CPS often benefits from concepts of multiform and logical time(s) for their natural description. High-level formalisms used to model software, hardware and physics additionally alter this perception of time quite significantly.</p>
      <p>In model-based system design, time is usually abstracted to serve the purpose of one of many design tasks: verification, simulation, profiling, performance analysis, scheduling analysis, parallelization, distribution, or virtual prototyping. For example in non-real-time commodity software, timing abstraction such as number of instructions and algorithmic complexity is sufficient: software will run the same on different machines, except slower or faster. Alternatively, in cyber-physical systems, multiple recurring instances of meaningful events may create as many dedicated logical clocks, on which to ground modeling and design practices.</p>
      <p>Time abstraction increases efficiency in event-driven simulation or execution (i.e SystemC simulation models try to abstract time, from cycle-accurate to approximate-time, and to loosely-time), while attempting to retain functionality, but without any actual guarantee of valid accuracy (responsibility is left to the model designer). Functional determinism (a.k.a. conflict-freeness in Petri Nets, monotonicity in Kahn PNs, confluence in Milner's CCS, latency-insensitivity and elasticity in circuit design) allows for reducing to some amount the problem to that of many schedules of a single self-timed behavior, and time in many systems studies is partitioned into models of computation and communication (MoCCs). Multiple, multiform time(s) raises the question of combination, abstraction or refinement between distinct time bases. The question of combining continuous time with discrete logical time calls for proper discretization in simulation and implementation. While timed reasoning takes multiple forms, there is no unified foundation to reasoning about multi-form time in system design.</p>
      <p>The objective of project-team TEA is henceforth to define formal models for timed quantitative reasoning, composition, and integration in embedded system design. Formal time models and calculi should allow us to revisit common domain problems in real-time system design, such as time predictability and determinism, memory resources predictability, real-time scheduling, mixed-criticality and power management; yet from the perspective gained from inter-domain timed and quantitative abstraction or refinement relations. A regained focus on fundamentals will allow to deliver better tooled methodologies for virtual prototyping and integration of embedded architectures.</p>
    </subsection>
  </presentation>
  <fondements id="uid10">
    <bodyTitle>Research Program</bodyTitle>
    <subsection id="uid11" level="1">
      <bodyTitle>Previous Works</bodyTitle>
      <p>The challenges of team TEA support the claim that sound Cyber-Physical System design (including embedded, reactive, and concurrent systems altogether) should consider multi-form time models as a central aspect. In this aim, architectural specifications found in software engineering are a natural focal point to start from. Architecture descriptions organize a system model into manageable components, establish clear interfaces between them, collect domain-specific constraints and properties to help correct integration of components during system design. The definition of a formal design methodology to support heterogeneous or multi-form models of time in architecture descriptions demands the elaboration of sound mathematical foundations and the development of formal calculi and methods to instrument them. This constitutes the research program of team TEA.</p>
      <p>System design based on the “synchronous paradigm” has focused the attention of many academic and industrial actors on abstracting non-functional implementation details from system design. This elegant design abstraction focuses on the logic of interaction in reactive programs rather than their timed behavior, allowing to secure functional correctness while remaining an intuitive programming model for embedded systems. Yet, it corresponds to embedded technologies of single cores and synchronous buses from the 90s, and may hardly cover the semantic diversity of distribution, parallelism, heterogeneity, of cyber-physical systems found in 21st century Internet-connected, true-time<formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><msup><mrow/><mrow><mi>T</mi><mi>M</mi></mrow></msup></math></formula>-synchronized clouds, of tomorrow's grids.</p>
      <p>By contrast with a synchronous hypothesis yet from the same era, the polychronous MoCC implemented in the data-flow specification language Signal, available in the Eclipse project POP <footnote id="uid12" id-text="4"><i>Polychrony on Polarsys</i>, <ref xlink:href="https://www.polarsys.org/projects/polarsys.pop" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>www.<allowbreak/>polarsys.<allowbreak/>org/<allowbreak/>projects/<allowbreak/>polarsys.<allowbreak/>pop</ref></footnote> and in the CCSL standard. <footnote id="uid13" id-text="5"><i>Clock Constraints in UML/MARTE CCSL</i>. C. André, F. Mallet. RR-6540. Inria, 2008. <ref xlink:href="http://hal.inria.fr/inria-00280941" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>inria-00280941</ref></footnote>, are inherently capable of describing multi-clock abstractions of GALS systems. The POP and TimeSquare projects provide tooled infrastructures to refine high-level specifications into real-time streaming applications or locally synchronous and globally asynchronous systems, through a series of model analysis, verification, and synthesis services. These tool-supported refinement and transformation techniques can assist the system engineer from the earliest design stages of requirement specification to the latest stages of synthesis, scheduling and deployment. These characteristics make polychrony much closer to the required semantic for compositional, refinement-based, architecture-driven, system design.</p>
      <p>While polychrony was a step ahead of the traditional synchronous hypothesis, CCSL is a leap forward from synchrony and polychrony. The essence of CCSL is “multi-form time” toward addressing all of the domain-specific physical, electronic and logical aspects of cyber-physical system design.
</p>
    </subsection>
    <subsection id="uid14" level="1">
      <bodyTitle>Modeling Times</bodyTitle>
      <p>To make a sense and eventually formalize the semantics of time in system design, we should most certainly rely on algebraic representations of time found in previous works and introduce the paradigm of "time systems" (type systems to represent time) in a way reminiscent to CCSL. Just as a type system abstracts data carried along operations in a program, a time system abstracts the causal interaction of that program module or hardware element with its environment, its pre and post conditions, its assumptions and guarantees, either logical or numerical, discrete or continuous. Some fundamental concepts of the time systems we envision are present in the clock calculi found in data-flow synchronous languages like Signal or Lustre, yet bound to a particular model of concurrency, hence time.</p>
      <p>In particular, the principle of refinement type systems <footnote id="uid15" id-text="6"><i>Abstract Refinement Types</i>. N. Vazou, P. Rondon, and R. Jhala. European Symposium on Programming. Springer, 2013.</footnote>, is to associate information (data-types) inferred from programs and models with properties pertaining, for instance, to the algebraic domain on their value, or any algebraic property related to its computation: effect, memory usage, pre-post condition, value-range, cost, speed, time, temporal logic <footnote id="uid16" id-text="7"><i>LTL types FRP</i>. A. Jeffrey. Programming Languages meets Program Verification.</footnote>. Being grounded on type and domain theories, a time system should naturally be equipped with program analysis techniques based on type inference (for data-type inference) or abstract interpretation (for program properties inference) to help establish formal relations between heterogeneous component “types”. Just as a time calculus may formally abstract timed concurrent behaviors of system components, timed relations (abstraction and refinement) represent interaction among components.</p>
      <p>Scalability and compositionality requires the use of assume-guarantee reasoning to represent them, and to facilitate composition by behavioral sub-typing, in the spirit of the (static) contract-based formalism proposed by Passerone et al. <footnote id="uid17" id-text="8"><i>A contract-based formalism for the specification of heterogeneous systems</i>. L. Benvenistu, et al. FDL, 2008</footnote>. Verification problems encompassing heterogeneously timed specifications are common and of great variety: checking correctness between abstract and concrete time models relates to desynchronisation (from synchrony to asynchrony) and scheduling analysis (from synchrony to hardware). More generally, they can be perceived from heterogeneous timing viewpoints (e.g. mapping a synchronous-time software on a real-time middle-ware or hardware).</p>
      <p>This perspective demands capabilities not only to inject time models one into the other (by abstract interpretation, using refinement calculi), to compare time abstractions one another (using simulation, refinement, bi-simulation, equivalence relations) but also to prove more specific properties (synchronization, determinism, endochrony). All this formalization effort will allow to effectively perform the tooled validation of common cross-domain properties (e.g. cost v.s. power v.s. performance v.s. software mapping) and tackle equally common yet though case studies such as these linking battery capacity, to on-board CPU performance, to static software schedulability, to logical software correctness and plant controllability: the choice of the right sampling period across the system components.</p>
    </subsection>
    <subsection id="uid18" level="1">
      <bodyTitle>Modeling Architectures</bodyTitle>
      <p>To address the formalization of such cross-domain case studies, modeling the architecture formally plays an essential role. An architectural model represents components in a distributed system as boxes with well-defined interfaces, connections between ports on component interfaces, and specifies component properties that can be used in analytical reasoning about the model. Several architectural modeling languages for embedded systems have emerged in recent years, including the SAE AADL <footnote id="uid19" id-text="9"><i>Architecture Analysis and Design Language</i>, AS-5506. SAE, 2004. <ref xlink:href="http://standards.sae.org/as5506b" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>standards.<allowbreak/>sae.<allowbreak/>org/<allowbreak/>as5506b</ref></footnote>, SysML <footnote id="uid20" id-text="10"><i>System modeling Language</i>. OMG, 2007. <ref xlink:href="http://www.omg.org/spec/SysML" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>www.<allowbreak/>omg.<allowbreak/>org/<allowbreak/>spec/<allowbreak/>SysML</ref></footnote>, UML MARTE <footnote id="uid21" id-text="11"><i>UML Profile for MARTE</i>. OMG, 2009. <ref xlink:href="http://www.omg.org/spec/MARTE" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>www.<allowbreak/>omg.<allowbreak/>org/<allowbreak/>spec/<allowbreak/>MARTE</ref></footnote>.</p>
      <p>In system design, an architectural specification serves several important purposes. First, it breaks down a system model into manageable components to establish clear interfaces between components. In this way, complexity becomes manageable by hiding details that are not relevant at a given level of abstraction. Clear, formally defined, component interfaces allow us to avoid integration problems at the implementation phase. Connections between components, which specify how components affect each other, help propagate the effects of a change in one component to the linked components.</p>
      <p>Most importantly, an architectural model is a repository to share knowledge about the system being designed. This knowledge can be represented as requirements, design artifacts, component implementations, held together by a structural backbone. Such a repository enables automatic generation of analytical models for different aspects of the system, such as timing, reliability, security, performance, energy, etc. Since all the models are generated from the same source, the consistency of assumptions w.r.t. guarantees, of abstractions w.r.t. refinements, used for different analyses becomes easier, and can be properly ensured in a design methodology based on formal verification and synthesis methods.</p>
      <p>Related works in this aim, and closer in spirit to our approach (to focus on modeling time) are domain-specific languages such as Prelude <footnote id="uid22" id-text="12"><i>The Prelude language</i>. LIFL and ONERA, 2012. <ref xlink:href="http://www.lifl.fr/~forget/prelude.html" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>www.<allowbreak/>lifl.<allowbreak/>fr/<allowbreak/>~forget/<allowbreak/>prelude.<allowbreak/>html</ref></footnote> to model the real-time characteristics of embedded software architectures. Conversely, standard architecture description languages could be based on algebraic modeling tools, such as interface theories with the ECDAR tool <footnote id="uid23" id-text="13"><i>PyECDAR, timed games for timed specifications</i>. Inria, 2013. <ref xlink:href="https://project.inria.fr/pyecdar" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>project.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>pyecdar</ref></footnote>.</p>
      <p>In project TEA, it takes form by the normalization of the AADL standard's formal semantics and the proposal of a time specification annex in the form of related standards, such as CCSL, to model concurrency time and physical properties, and PSL, to model timed traces.</p>
    </subsection>
    <subsection id="uid24" level="1">
      <bodyTitle>Scheduling Theory</bodyTitle>
      <p>Based on sound formalization of time and CPS architectures, real-time scheduling theory provides tools for predicting the timing behavior of a CPS which consists of many interacting software and hardware components. Expressing parallelism among software components is a crucial aspect of the design process of a CPS. It allows for efficient partition and exploitation of available resources.</p>
      <p>The literature about real-time scheduling <footnote id="uid25" id-text="14"><i>A survey of hard real-time scheduling for multiprocessor systems</i>. R. I. Davis and A. Burns. <i>ACM Computing Survey</i> 43(4), 2011.</footnote> provides very mature schedulability tests regarding many scheduling strategies, preemptive or non-preemptive scheduling, uniprocessor or multiprocessor scheduling, etc. Scheduling of data-flow graphs has also been extensively studied in the past decades.</p>
      <p>A milestone in this prospect is the development of abstract affine scheduling techniques <footnote id="uid26" id-text="15"><i>Buffer minimization in EDF scheduling of data-flow graphs</i>. A. Bouakaz and J.-P. Talpin. LCTES, ACM, 2013.</footnote>. It consists, first, of approximating task communication patterns (here Safety-Critical Java threads) using cyclo-static data-flow graphs and affine functions. Then, it uses state of the art ILP techniques to find optimal schedules and concretize them as real-time schedules for Safety Critical Java programs <footnote id="uid27" id-text="16"><i>ADFG for the synthesis of hard real-time applications</i>. A. Bouakaz, J.-P. Talpin, J. Vitek. ACSD, IEEE, June 2012.</footnote> <footnote id="uid28" id-text="17"><i>Design of SCJ Level 1 Applications Using Affine Abstract Clocks</i>. A. Bouakaz and J.-P. Talpin. SCOPES, ACM, 2013.</footnote>.</p>
      <p>Abstract scheduling, or the use of abstraction and refinement techniques in scheduling borrowed to the theory of abstract interpretation <footnote id="uid29" id-text="18"><i>La vérification de programmes par interprétation abstraite</i>. P. Cousot. Séminaire au Collège de France, 2008.</footnote> is a promising development toward tooled methodologies to orchestrate thousands of heterogeneous hardware/software blocks on modern CPS architectures (just consider modern cars or aircrafts). It is an issue that simply defies the state of the art and known bounds of complexity theory in the field, and consequently requires a particular address.</p>
      <p>To develop the underlying theory of this promising research topic, we first need to deepen the theoretical foundation to establish links between scheduling analysis and abstract interpretation. A theory of time systems would offer the ideal framework to pursue this development. It amounts to representing scheduling constraints, inferred from programs, as types or contract properties. It allows to formalize the target time model of the scheduler (the architecture, its middle-ware, its real-time system) and defines the basic concepts to verify assumptions made in one with promises offered by the other: contract verification or, in this case, synthesis.</p>
    </subsection>
    <subsection id="uid30" level="1">
      <bodyTitle>Virtual Prototyping</bodyTitle>
      <p>Virtual Prototyping is the technology of developing realistic simulators from models of a system under design; that is, an emulated device that captures most, if not all, of the required properties of the real system, based on its specifications. A virtual prototype should be run and tested like the real device. Ideally, the real application software would be run on the virtual prototyping platform and produce the same results as the real device with the same sequence of outputs and reported performance measurements. This may be true to some extent only. Some trade-offs have often to be made between the accuracy of the virtual prototype, and time to develop accurate models.</p>
      <p>In order to speed-up simulation time, the virtual prototype must trade-off with something. Depending upon the application designer's goals, one may be interested in trading some loss of accuracy in exchange for simulation speed, which leads to constructing simulation models that focus on some design aspects and provide abstraction of others. A simulation model can provide an abstraction of the simulated hardware in three directions:</p>
      <simplelist>
        <li id="uid31">
          <p noindent="true"><i>Computation abstraction</i>. A hardware component computes a high level function by carrying out a series of small steps executed by composing logical gates. In a virtual prototyping environment, it is often possible to compute the high level function directly by using the available computing resources on the simulation host machine, thus abstracting the hardware function.</p>
        </li>
        <li id="uid32">
          <p noindent="true"><i>Communication abstraction</i>. Hardware components communicate together using some wiring, and some protocol to transmit the data. Simulation of the communication and the particular protocol may be irrelevant for the purpose of virtual prototyping: communication can be abstracted into higher level data transmission functions.</p>
        </li>
        <li id="uid33">
          <p noindent="true"><i>Timing Abstraction</i>. In a cycle accurate simulator, there are multiple simulation tasks, and each task makes some progress on each clock cycle, but this slows down the simulation. In a virtual prototyping experiment, one may not need such precise timing information: coarser time abstractions can be defined allowing for faster simulation.</p>
        </li>
      </simplelist>
      <p>The cornerstone of a virtual prototyping platform is the component that simulates the processor(s) of the platform, and its associated peripherals. Such simulation can be <i>static</i> or <i>dynamic</i>.</p>
      <p>A solution usually adopted to handle time in virtual prototyping is to manage hierarchical time scales, use component abstractions where possible to gain performance, use refinement to gain accuracy where needed. Localized time abstraction may not only yield faster simulation, but facilitate also verification and synthesis (e.g. synchronous abstractions of physically distributed systems). Such an approach requires computations and communications to be harmoniously discretized and abstracted from originally heterogeneous viewpoints onto a structuring, articulating, pivot model, for concerted reasoning about time and scheduling of events in a way that ensures global system specification correctness.</p>
      <p>In the short term these component models could be based on libraries of predefined models of different levels of abstractions. Such abstractions are common in large programming workbench for hardware modeling, such as SystemC, but less so, because of the engineering required, for virtual prototyping platforms.</p>
      <p>The approach of team TEA provides an additional ingredient in the form of rich component interfaces. It therefore dictates to further investigate the combined use of conventional virtual prototyping libraries, defined as executable abstractions of real hardware, with executable component simulators synthesised from rich interface specifications (using, e.g., conventional compiling techniques used for synchronous programs).</p>
    </subsection>
  </fondements>
  <domaine id="uid34">
    <bodyTitle>Application Domains</bodyTitle>
    <subsection id="uid35" level="1">
      <bodyTitle>Automotive and Avionics</bodyTitle>
      <p>From our continuous collaboration with major academic and industrial partners through projects TOPCASED, OPENEMBEDD, SPACIFY, CESAR, OPEES, P and CORAIL, our experience has primarily focused on the aerospace domain. The topics of time and architecture of team TEA extend to both avionics and automotive. Yet, the research focus on time in team TEA is central in any aspect of, cyber-physical, embedded system design in factory automation, automotive, music synthesis, signal processing, software radio, circuit and system on a chip design; many application domains which, should more collaborators join the team, would definitely be worth investigating.</p>
      <p>Multi-scale, multi-aspect time modeling, analysis and software synthesis will greatly contribute to architecture modeling in these domains, with applications to optimized (distributed, parallel, multi-core) code generation for avionics (project Corail with Thales avionics, section 8) as well as modeling standards, real-time simulation and virtual integration in automotive (project with Toyota ITC, section 8).</p>
      <p>Together with the importance of open-source software, one of these projects, the FUI Project P (section 8), demonstrated that a centralized model for system design could not just be a domain-specific programming language, such as discrete Simulink data-flows or a synchronous language. Synchronous languages implement a fixed model of time using logical clocks that are abstraction of time as sensed by software. They correspond to a fixed viewpoint in system design, and in a fixed hardware location in the system, which is not adequate to our purpose and must be extended.</p>
      <p>In project P, we first tried to define a centralized model for importing discrete-continuous models onto a simplified implementation of SIMULINK: P models. Certified code generators would then be developed from that format. Because this does not encompass all aspects being translated to P, the P meta-model is now being extended to architecture description concepts (of the AADL) in order to become better suited for the purpose of system design. Another example is the development of System modeler on top of SCADE, which uses the more model-engineering flavored formalism SysML to try to unambiguously represent architectures around SCADE modules.</p>
      <p>An abstract specification formalism, capable of representing time, timing relations, with which heterogeneous models can be abstracted, from which programs can be synthesized, naturally appears better suited for the purpose of virtual prototyping. RT-Builder, based on Signal like Polychrony and developed by TNI, was industrially proven and deployed for that purpose at Peugeot. It served to develop the virtual platform simulating all on-board electronics of PSA cars. This `hardware in the loop” simulator was used to test equipments supplied by other manufacturers with respect to virtual cars. In the advent of the related automotive standard, RT-Builder then became AUTOSAR-Builder.
</p>
    </subsection>
    <subsection id="uid36" level="1">
      <bodyTitle>Factory Automation</bodyTitle>
      <p>In collaboration with Mitsubishi R&amp;D, we explore another application domain where time and domain heterogeneity are prime concerns: factory automation. In factory automation alone, a system is conventionally built from generic computing modules: PLCs (Programmable Logic Controllers), connected to the environment with actuators and detectors, and linked to a distributed network. Each individual, physically distributed, PLC module must be timely programmed to perform individually coherent actions and fulfill the global physical, chemical, safety, power efficiency, performance and latency requirements of the whole production chain. Factory chains are subject to global and heterogeneous (physical, electronic, functional) requirements whose enforcement must be orchestrated for all individual components.</p>
      <p>Model-based analysis in factory automation emerges from different scientific domains and focus on different CPS abstractions that interact in subtle ways: logic of PLC programs, real-time electromechanical processing, physical and chemical environments. This yields domain communication problems that render individual domain analysis useless. For instance, if one domain analysis (e.g. software) modifies a system model in a way that violates assumptions made by another domain (e.g. chemistry) then the detection of its violation may well be impossible to explain to either of the software and chemistry experts. As a consequence, cross-domain analysis issues are discovered very late during system integration and lead to costly fixes. This is particularly prevalent in multi-tier industries, such as avionic, automotive, factories, where systems are prominently integrated from independently-developed parts.
</p>
    </subsection>
  </domaine>
  <highlights id="uid37">
    <bodyTitle>Highlights of the Year</bodyTitle>
    <subsection id="uid38" level="1">
      <bodyTitle>Highlights of the Year</bodyTitle>
      <p>In 2016, TEA was successfully evaluated, one year after its creation. The team started fruitful collaborations with UC San Diego, with Mitsubishi R&amp;D, with ASTRI, to elaborate our research program on system composition, verification, and simulation toward novel applications perspectives in codesign, operating system design, factory automation, robotics.</p>
    </subsection>
  </highlights>
  <logiciels id="uid39">
    <bodyTitle>New Software and Platforms</bodyTitle>
    <subsection id="uid40" level="1">
      <bodyTitle>ADFG: Affine data-flow graphs scheduler synthesis</bodyTitle>
      <participants>
        <person key="tea-2015-idp66624">
          <firstname>Alexandre</firstname>
          <lastname>Honorat</lastname>
        </person>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
        <person key="moais-2014-idm5672">
          <firstname>Thierry</firstname>
          <lastname>Gautier</lastname>
        </person>
        <person key="tea-2014-idp66648">
          <firstname>Loïc</firstname>
          <lastname>Besnard</lastname>
        </person>
      </participants>
      <p>We proposed <ref xlink:href="#tea-2016-bid0" location="biblio" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>, and implemented <footnote id="uid41" id-text="19"><i>The ADFG tool</i>, Adnan Bouakaz, <ref xlink:href="http://people.irisa.fr/Adnan.Bouakaz/software.htm" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>people.<allowbreak/>irisa.<allowbreak/>fr/<allowbreak/>Adnan.<allowbreak/>Bouakaz/<allowbreak/>software.<allowbreak/>htm</ref></footnote>, a new data-flow design model: ADFG, initially to synthesize schedulers for SCJ/L1 applications. The principle of ADFG is to perform a linear abstraction of complex cyclo-static scheduling problems followed by the exploration of a concrete solution extracted from the abstract solution space, hence the name: abstract affine data-flow scheduling. ADFG guarantees schedules that ordinary (e.g. RTJ, SCJ) task-sets do not cause overflows or underflows. ADFG objectives are to maximize the throughput (the processors utilization) while minimizing buffering storage space needed between actors. ADFG supports EDF and fixed-priority scheduling policies for uni-, multi-processors and distributed systems.</p>
      <p>The data-flow design model of ADFG comes with a development tool integrated in the Eclipse IDE for easing the development of SCJ/L1 applications and enforcing the restrictions imposed by the design model. It consists of a GMF editor where applications are designed graphically and timing and buffering parameters can be synthesized. Abstract affine scheduling is first applied on the data-flow subgraph, that consists only of periodic actors, to compute timeless scheduling constraints (e.g. relation between the speeds of two actors) and buffering parameters. Then, symbolic fixed-priority schedulability analysis (i.e., synthesis of timing and scheduling parameters of actors) considers both periodic and aperiodic actors.</p>
      <p>In the case of safety-critical Java, and through a model-to-text transformations using Acceleo, SCJ code for missions, interfaces of handlers, and the mission sequencer is automatically generated in addition to the annotations needed by the memory checker. Channels are implemented as cyclic arrays or cyclical asynchronous buffers; and a fixed amount of memory is hence reused to store the infinite streams of tokens.</p>
      <object id="uid42">
        <table>
          <tr>
            <td>
              <ressource xlink:href="IMG/ADFGtool.png" type="float" width="384.2974pt" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest" media="WEB"/>
            </td>
          </tr>
        </table>
        <caption>The ADFG tool</caption>
      </object>
    </subsection>
    <subsection id="uid43" level="1">
      <bodyTitle>The Eclipse project POP</bodyTitle>
      <participants>
        <person key="tea-2014-idp66648">
          <firstname>Loïc</firstname>
          <lastname>Besnard</lastname>
        </person>
        <person key="moais-2014-idm5672">
          <firstname>Thierry</firstname>
          <lastname>Gautier</lastname>
        </person>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
      </participants>
      <p>The distribution of project POP is a major achievement of the ESPRESSO (and now TEA) project-team. The Eclipse project POP is a model-driven engineering front-end to our open-source toolset Polychrony. It was finalized in the frame of project OPEES, as a case study: by passing the POLARSYS qualification kit as a computer aided simulation and verification tool. This qualification was implemented by CS Toulouse in conformance with relevant generic (platform independent) qualification documents. Polychrony is now distributed by the Eclipse project POP on the platform of the POLARSYS industrial working group. Project-team TEA aims at continuing its dissemination to academic partners, as to its principles and features, and industrial partners, as to the services it can offer.</p>
      <object id="uid44">
        <table>
          <tr>
            <td>
              <ressource xlink:href="IMG/pop.png" type="float" width="320.25pt" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest" media="WEB"/>
            </td>
          </tr>
        </table>
        <caption>The Eclipse POP Environment</caption>
      </object>
      <p>Project POP is composed of the Polychrony tool set, under GPL license, and its Eclipse framework, under EPL license. SSME (Syntactic Signal-Meta under Eclipse), is the meta-model of the Signal language implemented with Eclipse/Ecore. It describes all syntactic elements specified in Signal Reference Manual <footnote id="uid45" id-text="20"><p><i>SIGNAL V4-Inria version: Reference Manual</i>. Besnard, L., Gautier, T. and Le Guernic, P.</p><p noindent="true"><ref xlink:href="http://www.irisa.fr/espresso/Polychrony" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>www.<allowbreak/>irisa.<allowbreak/>fr/<allowbreak/>espresso/<allowbreak/>Polychrony</ref>, 2010</p></footnote>: all Signal operators (e.g. arithmetic, clock synchronization), model (e.g. process frame, module), and construction (e.g. iteration, type declaration). The meta-model primarily aims at making the language and services of the Polychrony environment available to inter-operation and composition with other components (e.g. AADL, Simulink, GeneAuto, P) within an Eclipse-based development tool-chain. Polychrony now comprises the capability to directly import and export Ecore models instead of textual Signal programs, in order to facilitate interaction between components within such a tool-chain. The download site for project POP has opened in 2015 at <ref xlink:href="https://www.polarsys.org/projects/polarsys.pop" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>www.<allowbreak/>polarsys.<allowbreak/>org/<allowbreak/>projects/<allowbreak/>polarsys.<allowbreak/>pop</ref>. It should be noted that the Eclipse Foundation does not host code under GPL license. So, the Signal toolbox useful to compile Signal code from Eclipse is hosted on our web server.</p>
    </subsection>
    <subsection id="uid46" level="1">
      <bodyTitle>The Polychrony toolset</bodyTitle>
      <participants>
        <person key="tea-2014-idp66648">
          <firstname>Loïc</firstname>
          <lastname>Besnard</lastname>
        </person>
        <person key="moais-2014-idm5672">
          <firstname>Thierry</firstname>
          <lastname>Gautier</lastname>
        </person>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
      </participants>
      <p>The Polychrony toolset is an Open Source development environment for critical/embedded systems. It is based on Signal, a real-time polychronous data-flow language. It provides a unified model-driven environment to perform design exploration by using top-down and bottom-up design methodologies formally supported by design model transformations from specification to implementation and from synchrony to asynchrony. It can be included in heterogeneous design systems with various input formalisms and output languages. The Polychrony tool-set provides a formal framework to: validate a design at different levels, by the way of formal verification and/or simulation; refine descriptions in a top-down approach; abstract properties needed for black-box composition; compose heterogeneous components (bottom-up with COTS); generate executable code for various architectures. The Polychrony tool-set contains three main components and an experimental interface to GNU Compiler Collection (GCC):</p>
      <simplelist>
        <li id="uid47">
          <p noindent="true">The Signal toolbox, a batch compiler for the Signal language, and a structured API that provides a set of program transformations. Itcan be installed without other components and is distributed under GPL V2 license.</p>
        </li>
        <li id="uid48">
          <p noindent="true">The Signal GUI, a Graphical User Interface to the Signal toolbox (editor + interactive access to compiling functionalities). It can be used either as a specific tool or as a graphical view under Eclipse. In 2015, it has been transformed and restructured, in order to get a more up-to-date interface allowing multi-window manipulation of programs. It is distributed under GPL V2 license.</p>
        </li>
        <li id="uid49">
          <p noindent="true">The SSME platform, a front-end to the Signal toolbox in the Eclipse environment. It is distributed under EPL license.</p>
        </li>
      </simplelist>
      <object id="uid50">
        <table>
          <tr>
            <td>
              <ressource xlink:href="IMG/map.png" type="float" width="277.5474pt" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest" media="WEB"/>
            </td>
          </tr>
        </table>
        <caption>The Polychrony toolset high-level architecture</caption>
      </object>
      <p>As part of its open-source release, the Polychrony tool-set not only comprises source code libraries but also an important corpus of structured documentation, whose aim is not only to document each functionality and service, but also to help a potential developer to package a subset of these functionalities and services, and adapt them to developing a new application-specific tool: a new language front-end, a new back-end compiler. This multi-scale, multi-purpose documentation aims to provide different views of the software, from a high-level structural view to low-level descriptions of basic modules. It supports a distribution of the software “by apartment” (a functionality or a set of functionalities) intended for developers who would only be interested by part of the services of the tool-set. The Polychrony tool-set also provides a large library of Signal programs and examples, user documentations and developer-oriented implementation documents, and facilities to generate new versions. The Polychrony tool-set can be freely downloaded from <ref xlink:href="http://polychrony.inria.fr/" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>polychrony.<allowbreak/>inria.<allowbreak/>fr/</ref>. This site, intended for users and for developers, contains executable and source versions of the software for different platforms, user documentation, examples, libraries, scientific publications and implementation documentation. In particular, this is the site for the open-source distribution of Polychrony. The Inria GForge <ref xlink:href="https://gforge.inria.fr" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>gforge.<allowbreak/>inria.<allowbreak/>fr</ref> contains the whole source of the environment and its documentation. It is intended for developers.</p>
    </subsection>
  </logiciels>
  <resultats id="uid51">
    <bodyTitle>New Results</bodyTitle>
    <subsection id="uid52" level="1">
      <bodyTitle>Toward a distribution of ADFG</bodyTitle>
      <participants>
        <person key="tea-2015-idp66624">
          <firstname>Alexandre</firstname>
          <lastname>Honorat</lastname>
        </person>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
        <person key="moais-2014-idm5672">
          <firstname>Thierry</firstname>
          <lastname>Gautier</lastname>
        </person>
        <person key="tea-2014-idp66648">
          <firstname>Loïc</firstname>
          <lastname>Besnard</lastname>
        </person>
      </participants>
      <p>The ADFG tool is being developed in the context of the ADT "Opama" in order to serve both as scheduler synthesis tool from AADL specifications and ordinary tasksets. ADFG has been partly rewritten in order to target more users : it is now freely available online and comes with a complete documentation. These improvements imply that ADFG does not anymore provide Safety Critical Java application generation; its main purpose of scheduler synthesis is now available from an Eclipse plugin, as a command-line interface, and also in Polychrony (as part of the AADL to Signal translation process). Moreover ADFG accepts and exports several file formats with related scheduling tools: SDF3, Yartiss and soon Cheddar.</p>
      <p>The Eclipse interface has changed significantly with a dialog window and a console to present the results (as shown in the figure <ref xlink:href="#uid53" location="intern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>). Also the graphical data-flow graph editor is still present but has been simplified. An other big change (not seen by the end-user) is the internal use of the free LpSolve linear programming software instead of CPLEX. Finally, it will soon be possible to use this software not only as a scheduling synthesizer but also as a scheduling checker (with timing properties given by the user).</p>
      <object id="uid53">
        <table>
          <tr>
            <td>
              <ressource xlink:href="IMG/EclipseADFG.png" type="float" width="320.25pt" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest" media="WEB"/>
            </td>
          </tr>
        </table>
        <caption>ADFG under Eclipse</caption>
      </object>
    </subsection>
    <subsection id="uid54" level="1">
      <bodyTitle>Modular verification of cyber-physical systems using contract theory</bodyTitle>
      <participants>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
        <person key="PASUSERID">
          <firstname>Benoit</firstname>
          <lastname>Boyer</lastname>
        </person>
        <person key="PASUSERID">
          <firstname>David</firstname>
          <lastname>Mentre</lastname>
        </person>
        <person key="tea-2015-idp69088">
          <firstname>Simon</firstname>
          <lastname>Lunel</lastname>
        </person>
      </participants>
      <p>The primary goal of our project, in collaboration with Mitsubishi Electronics Research Centre Europe (MERCE), is to ensure correctness-by-design in realistic cyber-physical systems, i.e., systems that mix software and hardware in a physical environment, e.g., Mitsubishi factory automation lines or water-plant factory. To achieve that, we develop a verification methodology based on contract reasoning.</p>
      <p>We have first performed a state of the art of the research and the work of A. Platzer with the Differential Dynamic Logic (<formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mrow><mi>d</mi><mi>ℒ</mi></mrow></math></formula>) retained our attention <footnote id="uid55" id-text="21"><i>Differential Dynamic Logic for Hybrid Systems</i>, André Platzer, <ref xlink:href="http://symbolaris.com/logic/dL.html" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>symbolaris.<allowbreak/>com/<allowbreak/>logic/<allowbreak/>dL.<allowbreak/>html</ref></footnote>. This a formalism built on the Dynamic Logic of V. Pratt augmented with the possibility of expressing Ordinary Differential Equations (ODEs). ODEs are the usual way to model physical behaviors in physics and <formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mrow><mi>d</mi><mi>ℒ</mi></mrow></math></formula> permits to accurately model cyber-physical systems. But this logic can also express properties on real arithmetic and there is proof system associated, under the form of a sequent calculus, which let us a mean to prove specifications. To finish, it is very natural to use contract to specify systems since it was the primary goal of the work of V. Pratt. To conclude, <formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mrow><mi>d</mi><mi>ℒ</mi></mrow></math></formula> is particularly fit to our purpose.</p>
      <p>We have some preliminary results about a design-by-composition methodology: we have defined a syntactic composition operator in <formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mrow><mi>d</mi><mi>ℒ</mi></mrow></math></formula>, which enjoys associativity and commutativity. We have then characterized the conditions under which we can derive automatically a proof of the contract of our composition. To exemplified our ideas, we are currently studying a simplified water-tank system, which will serve as a basis for more realistic case studies. We plan to provide refinement and abstraction mechanisms to ultimately allow a mix between vertical and horizontal design.
</p>
    </subsection>
    <subsection id="uid56" level="1">
      <bodyTitle>Runtime verification and trace analysis</bodyTitle>
      <participants>
        <person key="tempo-2014-idm29712">
          <firstname>Vania</firstname>
          <lastname>Joloboff</lastname>
        </person>
        <person key="tea-2016-idp135568">
          <firstname>Daian</firstname>
          <lastname>Yue</lastname>
        </person>
        <person key="PASUSERID">
          <firstname>Frédéric</firstname>
          <lastname>Mallet</lastname>
        </person>
      </participants>
      <p>When engineers design a new cyber physical system, there are well
known requirements that can be translated as system properties that
must be verified. These properties can be expressed in some
formalism and when the model has been designed, the properties can be
checked at the model level, using model checking techniques or other
model verification techniques.</p>
      <p>This requires that the properties are well specified at the time the
virtual prototype is assembled. However it is also the case that many
intrinsic properties are actually unforeseen when the virtual
prototype is assembled, for example that some hardware buffer overflow
should not remain unnoticed by the software. In most cases, during
system design the simulation fails: the engineers then must
investigate the cause of the failure.</p>
      <p>A widely used technique for that consists in storing all of the trace
data of simulation sessions into trace files, which are analyzed later
with specialized trace analyzer tools. Such trace files have become
huge, possibly hundred of Gigabytes as all data are stored into the
trace files, and have become intractable by human manual handling.</p>
      <p>In order to better identify the reason for such failures and capture
the missing properties that the system should verify we have started to
work on a new run time verification approach based on trace analysis.
Approaches like PSL requires that the properties to verify are known
before hand. Our approach is attempting for the engineers to
experiment various property verification of failing simulations
without re-building the virtual prototype. We have established a
technique that makes it possible to investigate
properties either statically working from a trace file or dynamically
by introducing a dynamic verification component into the virtual prototype,
or actually the real system.</p>
      <p>The Trace Runtime Analysis Platform (TRAP) provides a model-based framework and
implements the corresponding tool chain to support runtime analysis and
verification of traces generated by virtual prototypes or cyber-physical
systems. The main goal is to make it easy for engineers to define system
properties that should be satisfied and verify them at system runtime (or from a
recorded session). The property verification tools proposed do not require a
detailed knowledge of the system implementation, do not require any modification
or recompilation of the system to investigate different properties, and do not
require the engineers to be familiar with temporal logic. TRAP proposes Domain
Specific Languages (DSL's) integrated within the Eclipse Modeling Framework to
express the properties. The DSL tool-chain uses the concept of Logical Clock
defined by CCSL and takes advantage of CCSL clock algebra as the underlying
formal support. The DSL's compilers eventually generate C++ code to verify the
properties at run time, making usage of dynamically loaded code.</p>
      <p>This year we have investigated and implemented this approach, using Eclipse
EMF. The STML and TPSL compilers are implemented in Java and generate C++
code. Results of this work have been published at the FDL'16 conference
referenced on IEEE Explore. <ref xlink:href="#tea-2016-bid1" location="biblio" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>
</p>
    </subsection>
    <subsection id="uid57" level="1">
      <bodyTitle>Polychronous automata and formal validation of AADL models</bodyTitle>
      <participants>
        <person key="tea-2014-idp66648">
          <firstname>Loïc</firstname>
          <lastname>Besnard</lastname>
        </person>
        <person key="moais-2014-idm5672">
          <firstname>Thierry</firstname>
          <lastname>Gautier</lastname>
        </person>
        <person key="tea-2015-idp66624">
          <firstname>Alexandre</firstname>
          <lastname>Honorat</lastname>
        </person>
        <person key="tea-2015-idp65384">
          <firstname>Clément</firstname>
          <lastname>Guy</lastname>
        </person>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
      </participants>
      <p>We have defined a model of <i>polychronous automata</i> based on clock relations <ref xlink:href="#tea-2016-bid2" location="biblio" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>.
A specificity of this model is that an automaton is submitted to clock constraints:
these finite-state automata define transition systems to express explicit reactions
together with properties, in the form of Boolean formulas over logical time, to constrain their behavior.
This allows one to specify a wide range of control-related configurations, either reactive, or restrictive
with respect to their control environment.
A semantic model is defined for these polychronous automata, that relies on a Boolean algebra of clocks.
Polychronous automata integrate smoothly with data-flow equations in the
polychronous model of computation.</p>
      <p>This polychronous MoC has been used previously as semantic model for systems described in the core AADL standard.
The core AADL is extended with annexes, such as the Behavior Annex, which allows to specify more precisely architectural behaviors.
The translation from AADL specifications into the polychronous model should take into account
these behavior specifications, which are based on description of automata.</p>
      <p>For that purpose, the AADL state transition systems are translated as Signal automata
(a slight extension of the Signal language has been defined to support the model of polychronous automata).
States are declared as Signal labels. Transitions are expressed using a call to a specific
Signal process <tt>Automaton\_Transition</tt> which takes as parameters the labels
of the source and destination states, and the condition expression corresponding to the AADL guard of the transition.
The transition processes implicitly declare the equations that are required to compute
the firing instants of the transitions.
These processes, viewed as macros, are replaced during Signal compilation with a set of Signal equations
handling current state and transition firing.</p>
      <p>Once the AADL model of a system transformed into a Signal program, one can analyze the program using the Polychrony framework in order to check if timing, scheduling and logical requirements over the whole system are met.</p>
      <p>We have implemented the translation and experimented it using a concrete case study, which is the AADL modeling of an Adaptive Cruise Control (ACC) system,
a highly safety-critical system embedded in recent cars.</p>
    </subsection>
    <subsection id="uid58" level="1">
      <bodyTitle>Formal Semantics of Behavior Specifications in the Architecture Analysis and Design Language Standard</bodyTitle>
      <participants>
        <person key="tea-2014-idp66648">
          <firstname>Loïc</firstname>
          <lastname>Besnard</lastname>
        </person>
        <person key="moais-2014-idm5672">
          <firstname>Thierry</firstname>
          <lastname>Gautier</lastname>
        </person>
        <person key="tea-2015-idp65384">
          <firstname>Clément</firstname>
          <lastname>Guy</lastname>
        </person>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
      </participants>
      <p>In system design, an architecture specification or model serves, among other purposes, as a repository to share knowledge about the system being designed. Such a repository enables automatic generation of analytical models for different aspects relevant to system design (timing, reliability, security, etc.).
The Architecture Analysis and Design Language (AADL) is a standard proposed by SAE to express architecture specifications and share knowledge between the different stakeholders about the system being designed.
To support unambiguous reasoning, formal verification, high-fidelity simulation of architecture specifications in a model-based AADL design work-flow, we have defined a formal semantics for the behavior specification of the AADL.
Since it began being discussed in the AADL
standard
committee, our formal semantics evolved from a synchronous model of computation and communication to a semantic framework
for time and concurrency in the standard: asynchronous, synchronous or timed, to serve as a reference for model checking,
code generation or simulation tools uses with the standard <ref xlink:href="#tea-2016-bid3" location="biblio" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>.
These semantics are simple, relying
on the structure of automata present in the standard already, yet provide
tagged, trace semantics framework to establish formal relations between (synchronous, asynchronous, timed)
usages or interpretations of behavior.</p>
      <p>We define the model of computation and communication of a behavior specification by the synchronous, timed or asynchronous traces of automata with variables. These constrained automata are derived from <i>polychronous automata</i> defined within the polychronous model of computation and communication <ref xlink:href="#tea-2016-bid2" location="biblio" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>.</p>
      <p>States of a behavior annex transition system can be either observable from the outside (<tt>initial</tt>, <tt>final</tt> or <tt>complete</tt> states), that is states in which the execution of the component is paused or stopped and its outputs are available; or non observable execution states, that is internal states. We thus define two kinds of steps in the transition system: <i>small steps</i>, that is non-observable steps from or to an internal state; and <i>big steps</i>, that is observable steps from a <i>complete</i> state to another, through a number of small steps).
The semantics of the AADL considers the observable states of the automaton. The set of states <formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><msub><mi>S</mi><mi>A</mi></msub></math></formula> of automaton <formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mi>A</mi></math></formula> (used to interpret the behavior annex) thus only contains states corresponding to these observable states and the set of transitions <formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><msub><mi>T</mi><mi>A</mi></msub></math></formula> big-step transitions from an observable state to another (by opposition with small-step transitions from or to an execution state).
The action language of the behavior annex defines actions performed during transitions. Actions associated with transitions are action blocks that are built from basic actions and a minimal set of control structures (sequences, sets, conditionals and loops).
Typically, a behavior action sequence is represented by concatenating the transition systems of its elements;
a behavior action set is represented by composing the transition systems of its elements.</p>
      <p>For our semantics, we considered a significant subset of the behavioral specification annex of the AADL. This annex allows one to attach a behavior specification to any components of a system modeled using the AADL, and can be then analyzed for different purposes which could be, for example, the verification of logical, timing or scheduling requirements.</p>
    </subsection>
    <subsection id="uid59" level="1">
      <bodyTitle>Integration of Polychrony with QGen</bodyTitle>
      <participants>
        <person key="tea-2014-idp66648">
          <firstname>Loïc</firstname>
          <lastname>Besnard</lastname>
        </person>
        <person key="moais-2014-idm5672">
          <firstname>Thierry</firstname>
          <lastname>Gautier</lastname>
        </person>
        <person key="PASUSERID">
          <firstname>Christophe</firstname>
          <lastname>Junke</lastname>
        </person>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
      </participants>
      <p>The FUI project P gave birth to the GGen qualifiable model compiler, developed by Adacore.
The tool accepts a discrete subset of Simulink expressed in a language called P and produces C or Ada code.</p>
      <p>Our contribution was about providing a semantic bridge between Polychrony and QGen <ref xlink:href="#tea-2016-bid4" location="biblio" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>.
Our objective was to use Polychrony to compute fined-grained static scheduling of computations and communications for P models based on architectural properties.
This work was twofold.
First, we defined an alternative unambiguous static block scheduler for QGen, which can compute both partial and total orders based on user preferences.
The purpose of this sequencer is to allow QGen to inter-operate with external sequencing tools while providing guarantees about the compatibility of external block execution orders with respect to both QGen's compilation scheme and user expectations.
On the other hand, we developed a transformation function from the P language, more precisely, from the System Model subset of P, to the Signal meta-model, SSME.
This work is based on a high-level API designed on top of SSME and can be used to transform a subset of Simulink to Signal.
We validated our approach with the test suite used by QGen which is composed of over two-hundred small-sized Simulink models.
We tested both block sequencing and model transformations.
We ran the conversion tool and the set of models used by QGen for its regression tests and successfully converted medium to large models.
The P language is capable of representing a useful subset of Simulink.
That is why it is an interesting tool to help interpreting Simulink models and possibly architectural properties as executable Signal programs.
The programs currently produced with our transformation tool can be compiled by Polychrony and reorganized as clusters of smaller processes.
</p>
    </subsection>
    <subsection id="uid60" level="1">
      <bodyTitle>Code generation for poly-endochronous processes</bodyTitle>
      <participants>
        <person key="tea-2014-idp66648">
          <firstname>Loïc</firstname>
          <lastname>Besnard</lastname>
        </person>
        <person key="moais-2014-idm5672">
          <firstname>Thierry</firstname>
          <lastname>Gautier</lastname>
        </person>
        <person key="tea-2014-idm28088">
          <firstname>Jean-Pierre</firstname>
          <lastname>Talpin</lastname>
        </person>
      </participants>
      <p>The synchronous modeling paradigm provides strong correctness guarantees for embedded system design
while requiring minimal environmental assumptions.
In most related frameworks, global execution correctness is achieved by ensuring the insensitivity
of (logical) time in the program from (real) time in the environment.
Tis property, called endochrony, can be statically checked, making it fast to ensure design correctness.
Unfortunately, it is not preserved by composition, which makes it difficult to exploit with
component-based design concepts in mind.
It has been shown that compositionality can be achieved by weakening the objective of endochrony:
a weakly endochronous system is a deterministic system that can perform independent computations and communications
in any order as long as this does not alter its global state.
Moreover, the non-blocking composition of weakly endochronous processes is isochronous, which means
that the synchronous and asynchronous compositions of weakly endochronous processes accept the same behaviors.
Unfortunately, testing weak endochrony needs state-space exploration, which is very costly in the general case.
Then, a particular case of weak endochrony, called polyendochrony, was defined, which allows static checking
thanks to the existing clock calculus.
The clock hierarchy of a polyendochronous system may have several trees, with synchronization relations
between clocks placed in different trees, but the clock expressions of the clock system must be such that
there is no clock expression (especially, no root clock expression) defined by symmetric difference:
root clocks cannot refer to absence. In other words, the clock system must be in disjunctive form <ref xlink:href="#tea-2016-bid5" location="biblio" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>.</p>
      <p>We have now implemented code generation for poly-endochronous systems in Polychrony.
This generation reuses techniques of distributed code generation, with rendez-vous management
for synchronization constraints on clocks which are not placed in the same tree of clocks.
The approach has been validated on several use cases running in parallel
with time to time synchronization.</p>
    </subsection>
  </resultats>
  <contrats id="uid61">
    <bodyTitle>Bilateral Contracts and Grants with Industry</bodyTitle>
    <subsection id="uid62" level="1">
      <bodyTitle>Bilateral Contracts with Industry</bodyTitle>
      <subsection id="idp4130544" level="2">
        <bodyTitle>
          <b>Toyota Info-Technology Centre (2014-2016)</b>
        </bodyTitle>
        <sanspuceslist>
          <li id="uid63">
            <p noindent="true">Title: Co-Modeling of Safety-Critical Multi-threaded Embedded Software for Multi-Core Embedded Platforms</p>
          </li>
          <li id="uid64">
            <p noindent="true">Inria principal investigator: Jean-Pierre Talpin</p>
          </li>
          <li id="uid65">
            <p noindent="true">International Partner (Institution - Laboratory - Researcher):</p>
            <sanspuceslist>
              <li id="uid66">
                <p noindent="true">Toyota Info-Technology Centre, Mountain View, California</p>
              </li>
              <li id="uid67">
                <p noindent="true">Virginia Tech Research Laboratories, Arlington</p>
              </li>
            </sanspuceslist>
          </li>
          <li id="uid68">
            <p noindent="true">Duration: renewed yearly since 2014</p>
          </li>
          <li id="uid69">
            <p noindent="true">Abstract: We started a new project in April 2014 funded by Toyota ITC, California, to work with Huafeng Yu (a former post-doctorate of team ESPRESSO) and with VTRL as US partner. The main topic of our project is the semantic-based model integration of automotive architectures, virtual integration, toward formal verification and automated code synthesis. This year, Toyota ITC is sponsoring our submission for the standardization of a time annex in the SAE standard AADL.</p>
            <p>In a second work-package, we aim at elaborating a standardized solution to virtually integrate and simulate a car based on heterogeneous models of its components. This year, it will be exemplified by the elaboration of a case study in collaboration with Virginia Tech. The second phase of the project will consist of delivering an open-source, reference implementation, of the proposed AADL standard and validate it with a real-scale model of the initial case-study.</p>
          </li>
        </sanspuceslist>
      </subsection>
    </subsection>
    <subsection id="uid70" level="1">
      <bodyTitle>Bilateral Grants with Industry</bodyTitle>
      <subsection id="idp4142064" level="2">
        <bodyTitle>
          <b>Mitsubishi Electric R&amp;D Europe (2015-2018)</b>
        </bodyTitle>
        <sanspuceslist>
          <li id="uid71">
            <p noindent="true">Title: Analysis and verification for correct by construction orchestration in automated factories</p>
          </li>
          <li id="uid72">
            <p noindent="true">Inria principal investigator: Jean-Pierre Talpin, Simon Lunel</p>
          </li>
          <li id="uid73">
            <p noindent="true">International Partner: Mitsubishi Electric R&amp;D Europe</p>
          </li>
          <li id="uid74">
            <p noindent="true">Duration: 2015 - 2018</p>
          </li>
          <li id="uid75">
            <p noindent="true">Abstract: The primary goal of our project is to ensure correctness-by-design in cyber-physical systems, i.e., systems that mix software and hardware in a physical environment, e.g., Mitsubishi factory automation lines. We plan to explore a multi-sorted algebraic framework for static analysis and formal verification starting from a simple use case extracted from Mitsubishi factory automation documentations. This will serve as a basis to more ambitious research where we intend to leverage recent advance in type theory, SMT solvers for nonlinear real arithmetic (dReal and <formula type="inline"><math xmlns="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mi>δ</mi></math></formula>-decidability) and contracts theory (meta-theory of Benveniste et al., Ruchkin's contracts) to provide a general framework of reasoning about heterogeneous factory components.</p>
          </li>
        </sanspuceslist>
      </subsection>
    </subsection>
  </contrats>
  <partenariat id="uid76">
    <bodyTitle>Partnerships and Cooperations</bodyTitle>
    <subsection id="uid77" level="1">
      <bodyTitle>National Initiatives</bodyTitle>
      <subsection id="uid78" level="2">
        <bodyTitle>ANR</bodyTitle>
        <sanspuceslist>
          <li id="uid79">
            <p noindent="true">Program: ANR</p>
          </li>
          <li id="uid80">
            <p noindent="true">Project acronym: <b>Feever</b></p>
          </li>
          <li id="uid81">
            <p noindent="true">Project title: Faust Environment Everyware</p>
          </li>
          <li id="uid82">
            <p noindent="true">Duration: 2014-2016</p>
          </li>
          <li id="uid83">
            <p noindent="true">Coordinator: Pierre Jouvelot, Mines ParisTech</p>
          </li>
          <li id="uid84">
            <p noindent="true">Other partners: Grame, Inria Rennes, CIEREC</p>
          </li>
          <li id="uid85">
            <p noindent="true">URL: <ref xlink:href="http://www.feever.fr" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>www.<allowbreak/>feever.<allowbreak/>fr</ref></p>
          </li>
          <li id="uid86">
            <p noindent="true">Abstract:</p>
            <p>The aim of project FEEVER is to ready the Faust music synthesis language for the Web. In this context, we collaborate with Mines ParisTech to define a type system suitable to model music signals timed at multiple rates and to formally support playing music synthesized from different physical locations.</p>
          </li>
        </sanspuceslist>
      </subsection>
      <subsection id="uid87" level="2">
        <bodyTitle>PAI CORAC</bodyTitle>
        <sanspuceslist>
          <li id="uid88">
            <p noindent="true">Program: CORAC</p>
          </li>
          <li id="uid89">
            <p noindent="true">Project acronym: CORAIL</p>
          </li>
          <li id="uid90">
            <p noindent="true">Project title: Composants pour l'Avionique Modulaire Étendue</p>
          </li>
          <li id="uid91">
            <p noindent="true">Duration: July 2013 - May 2017</p>
          </li>
          <li id="uid92">
            <p noindent="true">Coordinator: Thales Avionics</p>
          </li>
          <li id="uid93">
            <p noindent="true">Other partners: Airbus, Dassault Aviation, Eurocopter, Sagem...</p>
          </li>
          <li id="uid94">
            <p noindent="true">Abstract:</p>
            <p>The CORAIL project aims at defining components for Extended Modular Avionics. The contribution of project-team TEA is to define a specification method and to provide a generator of multi-task applications.</p>
          </li>
        </sanspuceslist>
      </subsection>
    </subsection>
    <subsection id="uid95" level="1">
      <bodyTitle>International Initiatives</bodyTitle>
      <subsection id="uid96" level="2">
        <bodyTitle>International Project Grants</bodyTitle>
        <subsection id="idp4177088" level="3">
          <bodyTitle>US Air Force Office for Scientific Research – Grant FA8655-13-1-3049</bodyTitle>
          <sanspuceslist>
            <li id="uid97">
              <p noindent="true">Title: Co-Modeling of Safety-Critical Multi-threaded Embedded Software for Multi-Core Embedded Platforms</p>
            </li>
            <li id="uid98">
              <p noindent="true">Inria principal investigator: Jean-Pierre Talpin</p>
            </li>
            <li id="uid99">
              <p noindent="true">International Partner (Institution - Laboratory - Researcher):</p>
              <sanspuceslist>
                <li id="uid100">
                  <p noindent="true">Virginia Tech Research Laboratories, Arlington (United States)</p>
                </li>
                <li id="uid101">
                  <p noindent="true">Embedded Systems Group, Teschnische Universität Kaiserslautern (Germany)</p>
                </li>
              </sanspuceslist>
            </li>
            <li id="uid102">
              <p noindent="true">Duration: 2013 - 2016</p>
            </li>
            <li id="uid103">
              <p noindent="true">See also: <ref xlink:href="http://www.irisa.fr/espresso/Polycore" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>www.<allowbreak/>irisa.<allowbreak/>fr/<allowbreak/>espresso/<allowbreak/>Polycore</ref></p>
            </li>
            <li id="uid104">
              <p noindent="true">Abstract: The aim of the USAF OSR Grant FA8655-13-1-3049 is to support collaborative research entitled “Co-Modeling of safety-critical multi-threaded embedded software for multi-core embedded platforms” between Inria project-team ESPRESSO, the VTRL Fermat Laboratory and the TUKL embedded system research group, under the program of the Polycore associate-project.</p>
            </li>
          </sanspuceslist>
        </subsection>
        <subsection id="idp4192656" level="3">
          <bodyTitle>Applied Science &amp; Technology Research Institute (ASTRI, Hong Kong)</bodyTitle>
          <sanspuceslist>
            <li id="uid105">
              <p noindent="true">Title: Virtual Prototyping of Embedded Software Architectures</p>
            </li>
            <li id="uid106">
              <p noindent="true">Inria principal investigator: Jean-Pierre Talpin</p>
            </li>
            <li id="uid107">
              <p noindent="true">International Partner: ASTRI, Hong Kong</p>
            </li>
            <li id="uid108">
              <p noindent="true">Duration: 2015 - 2016</p>
            </li>
            <li id="uid109">
              <p noindent="true">Abstract: the topics of our present collaboration is essentially on heterogeneous time modeling for virtual prototyping in cyber-physical systems. Our project covers a wide spectrum of area of experience developed since 2012 and comprising</p>
              <simplelist>
                <li id="uid110">
                  <p noindent="true">model-based design and analysis of cyber-physical systems;</p>
                </li>
                <li id="uid111">
                  <p noindent="true">system-level virtual prototyping and validation;</p>
                </li>
                <li id="uid112">
                  <p noindent="true">design space exploration and system synthesis;</p>
                </li>
              </simplelist>
            </li>
          </sanspuceslist>
        </subsection>
      </subsection>
      <subsection id="uid113" level="2">
        <bodyTitle>Inria International Labs</bodyTitle>
        <subsection id="uid114" level="3">
          <bodyTitle>SACCADES</bodyTitle>
          <sanspuceslist>
            <li id="uid115">
              <p noindent="true">Title: Saccades</p>
            </li>
            <li id="uid116">
              <p noindent="true">International Partner:</p>
              <sanspuceslist>
                <li id="uid117">
                  <p noindent="true">LIAMA</p>
                </li>
                <li id="uid118">
                  <p noindent="true">East China Normal University</p>
                </li>
                <li id="uid119">
                  <p noindent="true">Inria project-teams Aoste and Tea</p>
                </li>
              </sanspuceslist>
            </li>
            <li id="uid120">
              <p noindent="true">Duration: 2003 - now</p>
            </li>
            <li id="uid121">
              <p noindent="true">The SACCADES project is a LIAMA project hosted by East China Normal University and jointly led by Vania Joloboff (Inria)
and Min Zhang (ECNU).
The SACCADES project aims at improving the development of reliable cyber physical systems and more generally of distributed systems combining asynchronous with synchronous aspects, with different but complementary angles:</p>
              <simplelist>
                <li id="uid122">
                  <p noindent="true">develop the theoretical support for Models of Computations and Communications (MoCCs) that are the fundamentals basis of the tools.</p>
                </li>
                <li id="uid123">
                  <p noindent="true">develop software tools (a) to enable the development and verification of executable models of the application software, which may be local or distributed and (b) to define and optimize the mapping of software components over the available resources.</p>
                </li>
                <li id="uid124">
                  <p noindent="true">develop virtual prototyping technology enabling the validation of the application software on the target hardware platform.</p>
                </li>
              </simplelist>
              <p>The ambition of SACCADES project is to develop</p>
              <simplelist>
                <li id="uid125">
                  <p noindent="true">Theoretical Support for Cyber Physical Systems</p>
                </li>
                <li id="uid126">
                  <p noindent="true">Software Tools for design and validation of CPS</p>
                </li>
                <li id="uid127">
                  <p noindent="true">Virtual Prototyping of CPS</p>
                </li>
              </simplelist>
            </li>
          </sanspuceslist>
        </subsection>
      </subsection>
      <subsection id="uid128" level="2">
        <bodyTitle>Inria International Partners</bodyTitle>
        <subsection id="uid129" level="3">
          <bodyTitle>POLYCORE</bodyTitle>
          <sanspuceslist>
            <li id="uid130">
              <p noindent="true">Title: Models of computation for embedded software design</p>
            </li>
            <li id="uid131">
              <p noindent="true">International Partner:</p>
              <sanspuceslist>
                <li id="uid132">
                  <p noindent="true">Virginia Tech Research Laboratories (USA)</p>
                </li>
                <li id="uid133">
                  <p noindent="true">University of Kanpur (India)</p>
                </li>
              </sanspuceslist>
            </li>
            <li id="uid134">
              <p noindent="true">Duration: 2002 - now</p>
            </li>
            <li id="uid135">
              <p noindent="true">Team TEA collaborates with Sandeep Shukla (now with IIT Kanpur) and his team at Virginia Tech, since 2002 (NSF-Inria BALBOA and Polycore projects, USAF OSR grant).</p>
              <p>To date, our fruitful and sustained collaboration has yield the creation of the ACM-IEEE MEMOCODE conference series in 2003, of the ACM-SIGDA FMGALS workshop series, and of a full-day tutorial at ACM-IEEE DATE'09 on formal methods in system design. We have jointly edited two books with Springer <footnote id="uid136" id-text="22"><i>Formal methods and models for system design</i>, R. Gupta, S. Shukla, J.-P. Talpin, Eds. ISBN 1-4020-8051-4. Springer, 2004.</footnote> <footnote id="uid137" id-text="23"><i>Synthesis of embedded systems</i>. S. Shukla, J.-P. Talpin, Eds. ISBN 978-1-4419-6399-4. Springer, 2010</footnote>, two special issues of the IEEE Transactions on Computers and one of the IEEE Transactions on Industrial Informatics, and published more than 40 joint journal articles and conference papers. We published a joint paper at the 52nd. Digital Automation Conference in San Francisco <ref xlink:href="#tea-2016-bid6" location="biblio" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>.</p>
            </li>
          </sanspuceslist>
        </subsection>
        <subsection id="uid138" level="3">
          <bodyTitle>VESA</bodyTitle>
          <sanspuceslist>
            <li id="uid139">
              <p noindent="true">Title: Virtual Prototyping of embedded software architectures</p>
            </li>
            <li id="uid140">
              <p noindent="true">International Partner:</p>
              <sanspuceslist>
                <li id="uid141">
                  <p noindent="true">Applied Science &amp; Technology Research Institute (ASTRI, Hong Kong)</p>
                </li>
                <li id="uid142">
                  <p noindent="true">The University of Hong Kong</p>
                </li>
              </sanspuceslist>
            </li>
            <li id="uid143">
              <p noindent="true">Duration: 2012 - now</p>
            </li>
            <li id="uid144">
              <p noindent="true">We collaborate with John Koo, now with ASTRI, and LIAMA since 2012 through visiting grants of the Chinese Academy of Science and of the University of Rennes on the topics of heterogeneous time modeling and virtual prototyping in cyber-physical systems.</p>
              <p>In the context of project ITF ARD159 (System-Level Virtual Prototyping of Embedded Systems), ASTRI has used Polychrony and AADL to collaboratively develop a platform for conducting the design of an hardware-in-the-loop simulation of an UR5 robot arm, from its physical model described using Matlab/Simulink and powered using an Opal-RT/RT-Lab workstation, structured around an AADL system model, and using Polychrony to orchestrate real-time simulation down to FPGA analog outputs.</p>
            </li>
          </sanspuceslist>
        </subsection>
        <subsection id="uid145" level="3">
          <bodyTitle>TIX</bodyTitle>
          <sanspuceslist>
            <li id="uid146">
              <p noindent="true">Title: Time In Cybernetic Systems</p>
            </li>
            <li id="uid147">
              <p noindent="true">International Partner:</p>
              <sanspuceslist>
                <li id="uid148">
                  <p noindent="true">Rajesh Gupta, UCSD</p>
                </li>
                <li id="uid149">
                  <p noindent="true">Mani Srivastava, UCLA</p>
                </li>
              </sanspuceslist>
            </li>
            <li id="uid150">
              <p noindent="true">Start year: 2015</p>
            </li>
            <li id="uid151">
              <p noindent="true">The first topic of our collaboration is the formal definition of cross-domains clock models in system design and the formal verification of time stabilization and synchronization protocols used in distributed systems (sensor networks, data-bases). In this prospect, the NSF project Roseline is our basis of investigation (<ref xlink:href="https://sites.google.com/site/roselineproject" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>sites.<allowbreak/>google.<allowbreak/>com/<allowbreak/>site/<allowbreak/>roselineproject</ref>). Roseline aims at enabling robust, secure and efficient knowledge of time across the system stack.</p>
              <p>Our second topic of collaboration is the refoundation of time modeling in high-level reactive and scripting languages, for application to the above using uni-kernels to cut through system stacks. We aim at applying the concepts of refinement types to formally specify and infer timing properties in CPS models from different system design view-point (physical, hardware, software) and using different levels of abstraction into multi-sorted 1st order logic (delta-decidability, linear arithmetic, Boolean logic, temporal logic).</p>
            </li>
          </sanspuceslist>
        </subsection>
      </subsection>
    </subsection>
    <subsection id="uid152" level="1">
      <bodyTitle>International Research Visitors</bodyTitle>
      <subsection id="uid153" level="2">
        <bodyTitle>Visits of International Scientists</bodyTitle>
        <p>Rajesh Gupta (UC San Diego) visited project TEA in July 2016 in the context of IIP TIX.</p>
        <p>Brian Larson (FDA) visited project TEA in January and July 2016.</p>
        <subsection id="uid154" level="3">
          <bodyTitle>Internships</bodyTitle>
          <p>Daian Yue that was selected in the joint program between ENS Rennes and ECNU and joined project TEA for a six month internship in 2016.</p>
        </subsection>
      </subsection>
      <subsection id="uid155" level="2">
        <bodyTitle>Visits to International Teams</bodyTitle>
        <p>Vania Joloboff was invited for two short stays at University of East China Normal University in Shanghai and UC San Diego.</p>
        <p>Jean-Pierre Talpin visited ASTRI in May and December, in the context of IIP VESA.</p>
        <p>Jean-Pierre Talpin visited UC San Diego in October, in the context of IIP TIX.</p>
        <p>Jean-Pierre Talpin visited IIT Kanpur in February and November for the preparation and Chair of MEMOCODE'16.
</p>
      </subsection>
    </subsection>
  </partenariat>
  <diffusion id="uid156">
    <bodyTitle>Dissemination</bodyTitle>
    <subsection id="uid157" level="1">
      <bodyTitle>Promoting Scientific Activities</bodyTitle>
      <subsection id="uid158" level="2">
        <bodyTitle>Scientific events organisation</bodyTitle>
        <subsection id="uid159" level="3">
          <bodyTitle>General chair, scientific chair</bodyTitle>
          <p>Jean-Pierre Talpin served as General Chair and Finance Chair of the 14th. ACM-IEEE Conference on Methods and Models for System Design (MEMOCODE'16, IIT Kanpur, October 18-20.).</p>
        </subsection>
        <subsection id="uid160" level="3">
          <bodyTitle>Member of the organizing committees</bodyTitle>
          <p>Jean-Pierre Talpin and Vania Joloboff co-organized the Shonan workshop on “Architecture-Centric Modeling, Analysis, and Verification of Cyber-Physical Systems” in collaboration with Toyota ITC and Denso, March 21-24.</p>
          <p>Jean-Pierre Talpin is a member of the steering committee of the ACM-IEEE Conference on Methods and Models for System Design (MEMOCODE).</p>
        </subsection>
      </subsection>
      <subsection id="uid161" level="2">
        <bodyTitle>Scientific events selection</bodyTitle>
        <subsection id="uid162" level="3">
          <bodyTitle>Member of the conference program committees</bodyTitle>
          <p>Jean-Pierre Talpin served the program committee of:</p>
          <simplelist>
            <li id="uid163">
              <p noindent="true">ACVI'16, 3rd. Workshop on Architecture Centric Virtual Integration</p>
            </li>
            <li id="uid164">
              <p noindent="true">HLDVT'16, 18th. IEEE International High-Level Design Validation and Test Workshop</p>
            </li>
            <li id="uid165">
              <p noindent="true">ICESS'16, 13th. IEEE International Conference on Embedded Software and Systems</p>
            </li>
            <li id="uid166">
              <p noindent="true">IDEA'16, 2nd. International Workshop Integrating Data-flow, Embedded computing and Architecture</p>
            </li>
            <li id="uid167">
              <p noindent="true">LCTES'16, 19th. ACM SIGPLAN-SIGBED Conference on Languages, Compilers, and Tools for Embedded Systems</p>
            </li>
            <li id="uid168">
              <p noindent="true">MEMOCODE'16, 14th. ACM-IEEE Conference on Methods and Models for System Design</p>
            </li>
            <li id="uid169">
              <p noindent="true">SAC'16, 31st. ACM SIGAPP Symposium on Applied Computing</p>
            </li>
            <li id="uid170">
              <p noindent="true">SCOPES'16, 19th. International Workshop on Software and Compilers for Embedded Systems</p>
            </li>
            <li id="uid171">
              <p noindent="true">TASE'16, 10th. Theoretical Aspects of Software Engineering Conference</p>
            </li>
          </simplelist>
        </subsection>
      </subsection>
      <subsection id="uid172" level="2">
        <bodyTitle>Journal</bodyTitle>
        <subsection id="uid173" level="3">
          <bodyTitle>Member of the editorial boards</bodyTitle>
          <p>Jean-Pierre Talpin is Associate Editor with the ACM Transactions for Embedded Computing Systems (TECS), with the Springer journal on Frontiers of Computer Science (FCS) and with the EURASIP journal of embedded systems (JES).</p>
        </subsection>
        <subsection id="uid174" level="3">
          <bodyTitle>reviewer</bodyTitle>
          <p>Jean-Pierre Talpin reviewed articles for Acta Informatica.</p>
          <p>Thierry Gautier reviewed for Frontiers of Computer Science.</p>
        </subsection>
      </subsection>
    </subsection>
    <subsection id="uid175" level="1">
      <bodyTitle>Teaching - Supervision - Juries</bodyTitle>
      <subsection id="uid176" level="2">
        <bodyTitle>Invited talks</bodyTitle>
        <p>Vania Joloboff gave a talk in the series of the Distinguished Lecturers of the Computer Science and Engineering department at UC San Diego.</p>
        <p>Jean-Pierre Talpin gave an invited presentation at the APAC 2016 Summit on Robotics at the HKSTP in Hong Kong <ref xlink:href="https://www.apacinnosummit.net" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>www.<allowbreak/>apacinnosummit.<allowbreak/>net</ref>.</p>
      </subsection>
      <subsection id="uid177" level="2">
        <bodyTitle>Supervision</bodyTitle>
        <p>Vania Joloboff supervised work of Master student Daian Yue that was selected in the joint program between ENS Rennes and ECNU.</p>
        <p>Jean-Pierre Talpin is the supervisor of Simon Lunel's thesis on "<i>Timed contract algebras for correct by construction real-time system design</i>".</p>
      </subsection>
      <subsection id="uid178" level="2">
        <bodyTitle>Juries</bodyTitle>
        <p>Jean-Pierre Talpin served as examiner for the Ph.D. Thesis defense of Fatma Jebali on “Formal Framework for modeling and Verifying Globally Asynchronous Locally Synchronous Systems”, September 12., in Grenoble.</p>
        <p>Jean-Pierre Talpin served as referee for the PhD. Thesis Defence of Amani Khecharem on “Une approche de méta-modélisation pour la représentation multi-vues des architectures hétérogènes embarqués”, May 3., in Sophia Antipolis.
</p>
      </subsection>
    </subsection>
  </diffusion>
  <biblio id="bibliography" html="bibliography" numero="10" titre="Bibliography">
    
    <biblStruct id="tea-2016-bid15" type="incollection" rend="refer" n="refercite:besnard:inria-00540493">
      <identifiant type="doi" value="10.1007/978-1-4419-6400-7_1"/>
      <identifiant type="hal" value="inria-00540493"/>
      <analytic>
        <title level="a">Compilation of Polychronous Data Flow Equations</title>
        <author>
          <persName key="tea-2014-idp66648">
            <foreName>Loïc</foreName>
            <surname>Besnard</surname>
            <initial>L.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <editor role="editor">
          <persName>
            <foreName>Sandeep K.</foreName>
            <surname>Shukla</surname>
            <initial>S. K.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
        </editor>
        <title level="m">Synthesis of Embedded Software</title>
        <imprint>
          <publisher>
            <orgName>Springer</orgName>
          </publisher>
          <dateStruct>
            <year>2010</year>
          </dateStruct>
          <biblScope type="pages">1-40</biblScope>
          <ref xlink:href="http://hal.inria.fr/inria-00540493" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>inria-00540493</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid0" type="inproceedings" rend="refer" n="refercite:bouakaz:hal-00916487">
      <identifiant type="doi" value="10.1145/2463596.2463600"/>
      <identifiant type="hal" value="hal-00916487"/>
      <analytic>
        <title level="a">Design of Safety-Critical Java Level 1 Applications Using Affine Abstract Clocks</title>
        <author>
          <persName key="spades-2014-idp112384">
            <foreName>Adnan</foreName>
            <surname>Bouakaz</surname>
            <initial>A.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <title level="m">International Workshop on Software and Compilers for Embedded Systems</title>
        <loc>St. Goar, Germany</loc>
        <imprint>
          <dateStruct>
            <month>June</month>
            <year>2013</year>
          </dateStruct>
          <biblScope type="pages">58-67</biblScope>
          <ref xlink:href="https://hal.inria.fr/hal-00916487" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-00916487</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid18" type="article" rend="refer" n="refercite:Brunette2009233">
      <identifiant type="doi" value="10.1016/j.jlap.2008.11.005"/>
      <analytic>
        <title level="a">A metamodel for the design of polychronous systems</title>
        <author>
          <persName>
            <foreName>Christian</foreName>
            <surname>Brunette</surname>
            <initial>C.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName>
            <foreName>Abdoulaye</foreName>
            <surname>Gamatié</surname>
            <initial>A.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <title level="j">The Journal of Logic and Algebraic Programming</title>
        <imprint>
          <biblScope type="volume">78</biblScope>
          <biblScope type="number">4</biblScope>
          <dateStruct>
            <year>2009</year>
          </dateStruct>
          <biblScope type="pages">233 - 259</biblScope>
          <ref xlink:href="http://www.sciencedirect.com/science/article/pii/S1567832608000957" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>www.<allowbreak/>sciencedirect.<allowbreak/>com/<allowbreak/>science/<allowbreak/>article/<allowbreak/>pii/<allowbreak/>S1567832608000957</ref>
        </imprint>
      </monogr>
      <note type="bnote">IFIP WG1.8 Workshop on Applying Concurrency Research in Industry</note>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid13" type="article" rend="refer" n="refercite:tosem07">
      <identifiant type="doi" value="10.1145/1217295.1217298"/>
      <analytic>
        <title level="a">Polychronous Design of Embedded Real-Time Applications</title>
        <author>
          <persName>
            <foreName>Abdoulaye</foreName>
            <surname>Gamatié</surname>
            <initial>A.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <title level="j">ACM Transactions on Software Engineering and Methodology (TOSEM)</title>
        <imprint>
          <biblScope type="volume">16</biblScope>
          <biblScope type="number">2</biblScope>
          <dateStruct>
            <month>April</month>
            <year>2007</year>
          </dateStruct>
          <ref xlink:href="http://doi.acm.org/10.1145/1217295.1217298" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>doi.<allowbreak/>acm.<allowbreak/>org/<allowbreak/>10.<allowbreak/>1145/<allowbreak/>1217295.<allowbreak/>1217298</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid17" type="article" rend="refer" n="refercite:gamatie:inria-00522794">
      <identifiant type="doi" value="10.1109/TPDS.2009.125"/>
      <identifiant type="hal" value="inria-00522794"/>
      <analytic>
        <title level="a">The Signal Synchronous Multiclock Approach to the Design of Distributed Embedded Systems</title>
        <author>
          <persName>
            <foreName>Abdoulaye</foreName>
            <surname>Gamatié</surname>
            <initial>A.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <title level="j">IEEE Transactions on Parallel and Distributed Systems</title>
        <imprint>
          <biblScope type="volume">21</biblScope>
          <biblScope type="number">5</biblScope>
          <dateStruct>
            <year>2010</year>
          </dateStruct>
          <biblScope type="pages">641-657</biblScope>
          <ref xlink:href="http://hal.inria.fr/inria-00522794" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>inria-00522794</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid19" type="article" rend="refer" n="refercite:gamatie:hal-00541523">
      <identifiant type="hal" value="hal-00541523"/>
      <analytic>
        <title level="a">Synchronous design of avionic applications based on model refinements</title>
        <author>
          <persName>
            <foreName>Abdoulaye</foreName>
            <surname>Gamatié</surname>
            <initial>A.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <title level="j">Journal of Embedded Computing (IOS Press)</title>
        <imprint>
          <biblScope type="volume">2</biblScope>
          <biblScope type="number">3-4</biblScope>
          <dateStruct>
            <year>2006</year>
          </dateStruct>
          <biblScope type="pages">273-289</biblScope>
          <ref xlink:href="http://hal.archives-ouvertes.fr/hal-00541523" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>hal.<allowbreak/>archives-ouvertes.<allowbreak/>fr/<allowbreak/>hal-00541523</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid2" type="article" rend="refer" n="refercite:gautier:hal-01411257">
      <identifiant type="hal" value="hal-01411257"/>
      <analytic>
        <title level="a">Polychronous Automata and their Use for Formal Validation of AADL Models</title>
        <author>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2015-idp65384">
            <foreName>Clément</foreName>
            <surname>Guy</surname>
            <initial>C.</initial>
          </persName>
          <persName key="tea-2015-idp66624">
            <foreName>Alexandre</foreName>
            <surname>Honorat</surname>
            <initial>A.</initial>
          </persName>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName key="tea-2014-idp66648">
            <foreName>Loïc</foreName>
            <surname>Besnard</surname>
            <initial>L.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <title level="j">Frontiers of Computer Science -Springer-</title>
        <imprint>
          <dateStruct>
            <month>December</month>
            <year>2016</year>
          </dateStruct>
          <ref xlink:href="https://hal.inria.fr/hal-01411257" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01411257</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid16" type="article" rend="refer" n="refercite:Potop-Butucaru:2011:CMP:2362088.2362094">
      <analytic>
        <title level="a">From Concurrent Multi-clock Programs to Deterministic Asynchronous Implementations</title>
        <author>
          <persName>
            <foreName>Dumitru</foreName>
            <surname>Potop-Butucaru</surname>
            <initial>D.</initial>
          </persName>
          <persName key="aoste-2014-idp64176">
            <foreName>Yves</foreName>
            <surname>Sorel</surname>
            <initial>Y.</initial>
          </persName>
          <persName key="aoste-2014-idp62696">
            <foreName>Robert</foreName>
            <surname>de Simone</surname>
            <initial>R.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <title level="j">Fundamenta Informaticae</title>
        <imprint>
          <biblScope type="volume">108</biblScope>
          <biblScope type="number">1-2</biblScope>
          <dateStruct>
            <month>January</month>
            <year>2011</year>
          </dateStruct>
          <biblScope type="pages">91–118</biblScope>
          <ref xlink:href="http://dl.acm.org/citation.cfm?id=2362088.2362094" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>dl.<allowbreak/>acm.<allowbreak/>org/<allowbreak/>citation.<allowbreak/>cfm?id=2362088.<allowbreak/>2362094</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid5" type="article" rend="refer" n="refercite:talpin:hal-00768341">
      <identifiant type="doi" value="10.1016/j.scico.2010.06.006"/>
      <identifiant type="hal" value="hal-00768341"/>
      <analytic>
        <title level="a">Compositional design of isochronous systems</title>
        <author>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName>
            <foreName>Julien</foreName>
            <surname>Ouy</surname>
            <initial>J.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2014-idp66648">
            <foreName>Loïc</foreName>
            <surname>Besnard</surname>
            <initial>L.</initial>
          </persName>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-editorial-board="yes" x-international-audience="yes">
        <title level="j">Science of Computer Programming</title>
        <imprint>
          <biblScope type="volume">77</biblScope>
          <biblScope type="number">2</biblScope>
          <dateStruct>
            <month>February</month>
            <year>2012</year>
          </dateStruct>
          <biblScope type="pages">113-128</biblScope>
          <ref xlink:href="http://hal.archives-ouvertes.fr/hal-00768341" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>hal.<allowbreak/>archives-ouvertes.<allowbreak/>fr/<allowbreak/>hal-00768341</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid6" type="inproceedings" rend="refer" n="refercite:yu:hal-01148905">
      <identifiant type="hal" value="hal-01148905"/>
      <analytic>
        <title level="a">Model-Based Integration for Automotive Control Software</title>
        <author>
          <persName>
            <foreName>Huafeng</foreName>
            <surname>Yu</surname>
            <initial>H.</initial>
          </persName>
          <persName>
            <foreName>Joshi</foreName>
            <surname>Prashi</surname>
            <initial>J.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName>
            <foreName>Sandeep Kumar</foreName>
            <surname>Shukla</surname>
            <initial>S. K.</initial>
          </persName>
          <persName>
            <foreName>Shin'Ichi</foreName>
            <surname>Shiraishi</surname>
            <initial>S.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-international-audience="yes" x-proceedings="yes" x-invited-conference="no" x-editorial-board="yes">
        <title level="m">Digital Automation Conference</title>
        <loc>San Francisco, United States</loc>
        <imprint>
          <publisher>
            <orgName type="organisation">ACM</orgName>
          </publisher>
          <dateStruct>
            <month>June</month>
            <year>2015</year>
          </dateStruct>
          <ref xlink:href="https://hal.inria.fr/hal-01148905" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01148905</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid14" type="article" rend="refer" n="refercite:Jcsc03">
      <identifiant type="hal" value="docs"/>
      <analytic>
        <title level="a">Polychrony for system design</title>
        <author>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName>
            <foreName>J.-C.</foreName>
            <surname>Le Lann</surname>
            <initial>J.-C.</initial>
          </persName>
        </author>
      </analytic>
      <monogr>
        <title level="j">Journal of Circuits, Systems and Computers, Special Issue on Application Specific Hardware Design</title>
        <imprint>
          <biblScope type="volume">12</biblScope>
          <biblScope type="number">03</biblScope>
          <dateStruct>
            <month>June</month>
            <year>2003</year>
          </dateStruct>
          <ref xlink:href="http://hal.inria.fr/docs/00/07/18/71/PDF/RR-4715.pdf" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>docs/<allowbreak/>00/<allowbreak/>07/<allowbreak/>18/<allowbreak/>71/<allowbreak/>PDF/<allowbreak/>RR-4715.<allowbreak/>pdf</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid12" type="article" rend="year" n="cite:gautier:hal-01411257">
      <identifiant type="hal" value="hal-01411257"/>
      <analytic>
        <title level="a">Polychronous Automata and their Use for Formal Validation of AADL Models</title>
        <author>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2015-idp65384">
            <foreName>Clément</foreName>
            <surname>Guy</surname>
            <initial>C.</initial>
          </persName>
          <persName key="tea-2015-idp66624">
            <foreName>Alexandre</foreName>
            <surname>Honorat</surname>
            <initial>A.</initial>
          </persName>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName key="tea-2014-idp66648">
            <foreName>Loïc</foreName>
            <surname>Besnard</surname>
            <initial>L.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-editorial-board="yes" x-international-audience="yes" id="rid02167">
        <idno type="issn">2095-2228</idno>
        <title level="j">Frontiers of Computer Science -Springer-</title>
        <imprint>
          <dateStruct>
            <month>December</month>
            <year>2016</year>
          </dateStruct>
          <ref xlink:href="https://hal.inria.fr/hal-01411257" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01411257</ref>
        </imprint>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid11" type="inproceedings" rend="year" n="cite:aumage:hal-01290099">
      <identifiant type="hal" value="hal-01290099"/>
      <analytic>
        <title level="a">A Stencil DSEL for Single Code Accelerated Computing with SYCL</title>
        <author>
          <persName key="runtime-2014-idp80536">
            <foreName>Olivier</foreName>
            <surname>Aumage</surname>
            <initial>O.</initial>
          </persName>
          <persName key="runtime-2014-idp85888">
            <foreName>Denis</foreName>
            <surname>Barthou</surname>
            <initial>D.</initial>
          </persName>
          <persName key="tea-2015-idp66624">
            <foreName>Alexandre</foreName>
            <surname>Honorat</surname>
            <initial>A.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-international-audience="yes" x-proceedings="no" x-invited-conference="no" x-editorial-board="yes">
        <title level="m">SYCL 2016 1st SYCL Programming Workshop during the 21st ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</title>
        <loc>Barcelone, Spain</loc>
        <imprint>
          <dateStruct>
            <month>March</month>
            <year>2016</year>
          </dateStruct>
          <ref xlink:href="https://hal.archives-ouvertes.fr/hal-01290099" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>archives-ouvertes.<allowbreak/>fr/<allowbreak/>hal-01290099</ref>
        </imprint>
        <meeting id="cid625307">
          <title>SYCL Programming Workshop</title>
          <num>1</num>
          <abbr type="sigle">SYCL</abbr>
        </meeting>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid10" type="inproceedings" rend="year" n="cite:baelde:hal-01191172">
      <identifiant type="doi" value="10.4230/LIPIcs.CSL.2016.32"/>
      <identifiant type="hal" value="hal-01191172"/>
      <analytic>
        <title level="a">A Sequent Calculus for a Modal Logic on Finite Data Trees</title>
        <author>
          <persName key="prosecco-2016-idp154912">
            <foreName>David</foreName>
            <surname>Baelde</surname>
            <initial>D.</initial>
          </persName>
          <persName key="tea-2015-idp69088">
            <foreName>Simon</foreName>
            <surname>Lunel</surname>
            <initial>S.</initial>
          </persName>
          <persName key="dahu-2014-idp67040">
            <foreName>Sylvain</foreName>
            <surname>Schmitz</surname>
            <initial>S.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-international-audience="yes" x-proceedings="yes" x-invited-conference="no" x-editorial-board="yes">
        <editor role="editor">
          <persName>
            <foreName>Jean-Marc</foreName>
            <surname>Talbot</surname>
            <initial>J.-M.</initial>
          </persName>
          <persName>
            <foreName>Laurent</foreName>
            <surname>Regnier</surname>
            <initial>L.</initial>
          </persName>
        </editor>
        <title level="m">CSL 2016</title>
        <loc>Marseille, France</loc>
        <title level="s">Leibniz International Proceedings in Informatics</title>
        <imprint>
          <biblScope type="volume">62</biblScope>
          <biblScope type="number">32</biblScope>
          <publisher>
            <orgName>LZI</orgName>
          </publisher>
          <dateStruct>
            <month>September</month>
            <year>2016</year>
          </dateStruct>
          <biblScope type="pages">1–16</biblScope>
          <ref xlink:href="https://hal.inria.fr/hal-01191172" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01191172</ref>
        </imprint>
        <meeting id="cid396373">
          <title>International Conference on Computer Science Logic</title>
          <num>2016</num>
          <abbr type="sigle">CSL</abbr>
        </meeting>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid3" type="inproceedings" rend="year" n="cite:besnard:hal-01419968">
      <identifiant type="doi" value="10.1109/HLDVT.2016.7748252"/>
      <identifiant type="hal" value="hal-01419968"/>
      <analytic>
        <title level="a">Formal semantics of behavior specifications in the architecture analysis and design language standard</title>
        <author>
          <persName key="tea-2014-idp66648">
            <foreName>Loïc</foreName>
            <surname>Besnard</surname>
            <initial>L.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2015-idp65384">
            <foreName>Clément</foreName>
            <surname>Guy</surname>
            <initial>C.</initial>
          </persName>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName key="tea-2016-idp128128">
            <foreName>Brian R</foreName>
            <surname>Larson</surname>
            <initial>B. R.</initial>
          </persName>
          <persName>
            <foreName>Etienne</foreName>
            <surname>Borde</surname>
            <initial>E.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-international-audience="yes" x-proceedings="yes" x-invited-conference="no" x-editorial-board="yes">
        <title level="m">18th IEEE International High-Level Design Validation and Test Workshop</title>
        <loc>Santa Cruz, United States</loc>
        <title level="s">High-level design, verification and test</title>
        <imprint>
          <publisher>
            <orgName>IEEE</orgName>
          </publisher>
          <dateStruct>
            <month>October</month>
            <year>2016</year>
          </dateStruct>
          <biblScope type="pages">30 - 39</biblScope>
          <ref xlink:href="https://hal.inria.fr/hal-01419968" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01419968</ref>
        </imprint>
        <meeting id="cid625492">
          <title>IEEE International High-Level Design Validation and Test Workshop</title>
          <num>18</num>
          <abbr type="sigle">HLDVT</abbr>
        </meeting>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid4" type="inproceedings" rend="year" n="cite:junke:hal-01241808">
      <identifiant type="hal" value="hal-01241808"/>
      <analytic>
        <title level="a">Integration of polychrony and QGen model compiler</title>
        <author>
          <persName key="tea-2014-idp67904">
            <foreName>Christophe</foreName>
            <surname>Junke</surname>
            <initial>C.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName key="tea-2014-idp66648">
            <foreName>Loic</foreName>
            <surname>Besnard</surname>
            <initial>L.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-international-audience="yes" x-proceedings="yes" x-invited-conference="no" x-editorial-board="yes">
        <title level="m">ERTS'16 - European Congress on Embeddd Real-Rime Software and Systems</title>
        <loc>Toulouse, France</loc>
        <imprint>
          <dateStruct>
            <month>January</month>
            <year>2016</year>
          </dateStruct>
          <ref xlink:href="https://hal.inria.fr/hal-01241808" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01241808</ref>
        </imprint>
        <meeting id="cid68744">
          <title>European Congress on Embedded Real Time Software</title>
          <num>8</num>
          <abbr type="sigle">ERTS</abbr>
        </meeting>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid7" type="inproceedings" rend="year" n="cite:ngo:hal-01406488">
      <identifiant type="doi" value="10.1007/978-3-319-41528-4_5"/>
      <identifiant type="hal" value="hal-01406488"/>
      <analytic>
        <title level="a">PSCV: A Runtime Verification Tool for Probabilistic SystemC Models</title>
        <author>
          <persName key="tea-2014-idp69160">
            <foreName>Van Chan</foreName>
            <surname>Ngo</surname>
            <initial>V. C.</initial>
          </persName>
          <persName key="estasys-2014-idm31072">
            <foreName>Axel</foreName>
            <surname>Legay</surname>
            <initial>A.</initial>
          </persName>
          <persName key="tempo-2014-idm29712">
            <foreName>Vania</foreName>
            <surname>Joloboff</surname>
            <initial>V.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-international-audience="yes" x-proceedings="yes" x-invited-conference="no" x-editorial-board="yes">
        <editor role="editor">
          <persName>
            <foreName>Swarat</foreName>
            <surname>Chaudhuri</surname>
            <initial>S.</initial>
          </persName>
          <persName>
            <foreName>Azadeh</foreName>
            <surname>Farzan</surname>
            <initial>A.</initial>
          </persName>
        </editor>
        <title level="m">CAV 2016 - 28th International Conference on Computer Aided Verification</title>
        <loc>Toronto, Canada</loc>
        <title level="s">LNCS - Lecture Notes in Computer Science</title>
        <imprint>
          <biblScope type="volume">9779</biblScope>
          <publisher>
            <orgName>Springer</orgName>
          </publisher>
          <dateStruct>
            <month>July</month>
            <year>2016</year>
          </dateStruct>
          <biblScope type="pages">84 - 91</biblScope>
          <ref xlink:href="https://hal.inria.fr/hal-01406488" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01406488</ref>
        </imprint>
        <meeting id="cid116287">
          <title>International Conference on Computer Aided Verification</title>
          <num>28</num>
          <abbr type="sigle">CAV</abbr>
        </meeting>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid8" type="inproceedings" rend="year" n="cite:sankur:hal-01431472">
      <identifiant type="hal" value="hal-01431472"/>
      <analytic>
        <title level="a">An Abstraction Technique For Parameterized Model Checking of Leader Election Protocols: Application to FTSP</title>
        <author>
          <persName key="sumo-2015-idp71288">
            <foreName>Ocan</foreName>
            <surname>Sankur</surname>
            <initial>O.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-international-audience="yes" x-proceedings="no" x-invited-conference="no" x-editorial-board="yes">
        <title level="m">23rd International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)</title>
        <loc>Uppsala, Sweden</loc>
        <imprint>
          <dateStruct>
            <month>April</month>
            <year>2017</year>
          </dateStruct>
          <ref xlink:href="https://hal.archives-ouvertes.fr/hal-01431472" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>archives-ouvertes.<allowbreak/>fr/<allowbreak/>hal-01431472</ref>
        </imprint>
        <meeting id="cid302988">
          <title>International Conference on Tools and Algorithms for the Construction and Analysis of Systems</title>
          <num>23</num>
          <abbr type="sigle">TACAS</abbr>
        </meeting>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid1" type="inproceedings" rend="year" n="cite:yue:hal-01421890">
      <identifiant type="hal" value="hal-01421890"/>
      <analytic>
        <title level="a">Flexible Runtime Verification Based On Logical Clock Constraints</title>
        <author>
          <persName key="tea-2016-idp135568">
            <foreName>Daian</foreName>
            <surname>Yue</surname>
            <initial>D.</initial>
          </persName>
          <persName key="tempo-2014-idm29712">
            <foreName>Vania</foreName>
            <surname>Joloboff</surname>
            <initial>V.</initial>
          </persName>
          <persName key="aoste-2014-idp70680">
            <foreName>Frédéric</foreName>
            <surname>Mallet</surname>
            <initial>F.</initial>
          </persName>
        </author>
      </analytic>
      <monogr x-scientific-popularization="no" x-international-audience="yes" x-proceedings="yes" x-invited-conference="no" x-editorial-board="yes">
        <title level="m">FDL 2016 - Forum on specification &amp; Design Languages</title>
        <loc>Bremen, Germany</loc>
        <imprint>
          <dateStruct>
            <month>September</month>
            <year>2016</year>
          </dateStruct>
          <ref xlink:href="https://hal.inria.fr/hal-01421890" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01421890</ref>
        </imprint>
        <meeting id="cid72858">
          <title>Forum on specification and Design Languages</title>
          <num>2016</num>
          <abbr type="sigle">FDL</abbr>
        </meeting>
      </monogr>
    </biblStruct>
    
    <biblStruct id="tea-2016-bid9" type="techreport" rend="year" n="cite:besnard:hal-01419973">
      <identifiant type="doi" value="10.1109/HLDVT.2016.7748252"/>
      <identifiant type="hal" value="hal-01419973"/>
      <monogr>
        <title level="m">Formal semantics of behavior specifications in the architecture analysis and design language standard</title>
        <author>
          <persName key="tea-2014-idp66648">
            <foreName>Loïc</foreName>
            <surname>Besnard</surname>
            <initial>L.</initial>
          </persName>
          <persName key="moais-2014-idm5672">
            <foreName>Thierry</foreName>
            <surname>Gautier</surname>
            <initial>T.</initial>
          </persName>
          <persName key="tea-2014-idm25368">
            <foreName>Paul</foreName>
            <surname>Le Guernic</surname>
            <initial>P.</initial>
          </persName>
          <persName key="tea-2015-idp65384">
            <foreName>Clément</foreName>
            <surname>Guy</surname>
            <initial>C.</initial>
          </persName>
          <persName key="tea-2014-idm28088">
            <foreName>Jean-Pierre</foreName>
            <surname>Talpin</surname>
            <initial>J.-P.</initial>
          </persName>
          <persName key="tea-2016-idp128128">
            <foreName>Brian</foreName>
            <surname>Larson</surname>
            <initial>B.</initial>
          </persName>
          <persName>
            <foreName>Etienne</foreName>
            <surname>Borde</surname>
            <initial>E.</initial>
          </persName>
        </author>
        <imprint>
          <biblScope type="number">8950</biblScope>
          <publisher>
            <orgName type="institution">Inria</orgName>
          </publisher>
          <dateStruct>
            <year>2016</year>
          </dateStruct>
          <biblScope type="pages">30 - 39</biblScope>
          <ref xlink:href="https://hal.inria.fr/hal-01419973" location="extern" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://<allowbreak/>hal.<allowbreak/>inria.<allowbreak/>fr/<allowbreak/>hal-01419973</ref>
        </imprint>
      </monogr>
      <note type="typdoc">Research Report</note>
    </biblStruct>
  </biblio>
</raweb>
